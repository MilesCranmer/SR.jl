var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#MLJ-interface","page":"API","title":"MLJ interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SRRegressor\nMultitargetSRRegressor","category":"page"},{"location":"api/#SymbolicRegression.MLJInterfaceModule.SRRegressor","page":"API","title":"SymbolicRegression.MLJInterfaceModule.SRRegressor","text":"SRRegressor\n\nA model type for constructing a Symbolic Regression via Evolutionary Search, based on SymbolicRegression.jl, and implementing the MLJ model interface.\n\nFrom MLJ, the type can be imported using\n\nSRRegressor = @load SRRegressor pkg=SymbolicRegression\n\nDo model = SRRegressor() to construct an instance with default hyper-parameters. Provide keyword arguments to override hyper-parameter defaults, as in SRRegressor(binary_operators=...).\n\nSingle-target Symbolic Regression regressor (SRRegressor) searches for symbolic expressions that predict a single target variable from a set of input variables. All data is assumed to be Continuous. The search is performed using an evolutionary algorithm. This algorithm is described in the paper https://arxiv.org/abs/2305.01582.\n\nTraining data\n\nIn MLJ or MLJBase, bind an instance model to data with\n\nmach = machine(model, X, y)\n\nOR\n\nmach = machine(model, X, y, w)\n\nHere:\n\nX is any table of input features (eg, a DataFrame) whose columns are of scitype Continuous; check column scitypes with schema(X). Variable names in discovered expressions will be taken from the column names of X, if available. Units in columns of X (use DynamicQuantities for units) will trigger dimensional analysis to be used.\ny is the target, which can be any AbstractVector whose element scitype is   Continuous; check the scitype with scitype(y). Units in y (use DynamicQuantities   for units) will trigger dimensional analysis to be used.\nw is the observation weights which can either be nothing (default) or an AbstractVector whoose element scitype is Count or Continuous.\n\nTrain the machine using fit!(mach), inspect the discovered expressions with report(mach), and predict on new data with predict(mach, Xnew). Note that unlike other regressors, symbolic regression stores a list of trained models. The model chosen from this list is defined by the function selection_method keyword argument, which by default balances accuracy and complexity. You can override this at prediction time by passing a named tuple with keys data and idx.\n\nHyper-parameters\n\nbinary_operators: Vector of binary operators (functions) to use.   Each operator should be defined for two input scalars,   and one output scalar. All operators   need to be defined over the entire real line (excluding infinity - these   are stopped before they are input), or return NaN where not defined.   For speed, define it so it takes two reals   of the same type as input, and outputs the same type. For the SymbolicUtils   simplification backend, you will need to define a generic method of the   operator so it takes arbitrary types.\nunary_operators: Same, but for   unary operators (one input scalar, gives an output scalar).\nconstraints: Array of pairs specifying size constraints   for each operator. The constraints for a binary operator should be a 2-tuple   (e.g., (-1, -1)) and the constraints for a unary operator should be an Int.   A size constraint is a limit to the size of the subtree   in each argument of an operator. e.g., [(^)=>(-1, 3)] means that the   ^ operator can have arbitrary size (-1) in its left argument,   but a maximum size of 3 in its right argument. Default is   no constraints.\nbatching: Whether to evolve based on small mini-batches of data,   rather than the entire dataset.\nbatch_size: What batch size to use if using batching.\nelementwise_loss: What elementwise loss function to use. Can be one of   the following losses, or any other loss of type   SupervisedLoss. You can also pass a function that takes   a scalar target (left argument), and scalar predicted (right   argument), and returns a scalar. This will be averaged   over the predicted data. If weights are supplied, your   function should take a third argument for the weight scalar.   Included losses:       Regression:           - LPDistLoss{P}(),           - L1DistLoss(),           - L2DistLoss() (mean square),           - LogitDistLoss(),           - HuberLoss(d),           - L1EpsilonInsLoss(ϵ),           - L2EpsilonInsLoss(ϵ),           - PeriodicLoss(c),           - QuantileLoss(τ),       Classification:           - ZeroOneLoss(),           - PerceptronLoss(),           - L1HingeLoss(),           - SmoothedL1HingeLoss(γ),           - ModifiedHuberLoss(),           - L2MarginLoss(),           - ExpLoss(),           - SigmoidLoss(),           - DWDMarginLoss(q).\nloss_function: Alternatively, you may redefine the loss used   as any function of tree::AbstractExpressionNode{T}, dataset::Dataset{T},   and options::Options, so long as you output a non-negative   scalar of type T. This is useful if you want to use a loss   that takes into account derivatives, or correlations across   the dataset. This also means you could use a custom evaluation   for a particular expression. If you are using   batching=true, then your function should   accept a fourth argument idx, which is either nothing   (indicating that the full dataset should be used), or a vector   of indices to use for the batch.   For example,\n  function my_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\n      prediction, flag = eval_tree_array(tree, dataset.X, options)\n      if !flag\n          return L(Inf)\n      end\n      return sum((prediction .- dataset.y) .^ 2) / dataset.n\n  end\nnode_type::Type{N}=Node: The type of node to use for the search.   For example, Node or GraphNode.\npopulations: How many populations of equations to use.\npopulation_size: How many equations in each population.\nncycles_per_iteration: How many generations to consider per iteration.\ntournament_selection_n: Number of expressions considered in each tournament.\ntournament_selection_p: The fittest expression in a tournament is to be   selected with probability p, the next fittest with probability p*(1-p),   and so forth.\ntopn: Number of equations to return to the host process, and to   consider for the hall of fame.\ncomplexity_of_operators: What complexity should be assigned to each operator,   and the occurrence of a constant or variable. By default, this is 1   for all operators. Can be a real number as well, in which case   the complexity of an expression will be rounded to the nearest integer.   Input this in the form of, e.g., [(^) => 3, sin => 2].\ncomplexity_of_constants: What complexity should be assigned to use of a constant.   By default, this is 1.\ncomplexity_of_variables: What complexity should be assigned to use of a variable,   which can also be a vector indicating different per-variable complexity.   By default, this is 1.\nalpha: The probability of accepting an equation mutation   during regularized evolution is given by exp(-delta_loss/(alpha * T)),   where T goes from 1 to 0. Thus, alpha=infinite is the same as no annealing.\nmaxsize: Maximum size of equations during the search.\nmaxdepth: Maximum depth of equations during the search, by default   this is set equal to the maxsize.\nparsimony: A multiplicative factor for how much complexity is   punished.\ndimensional_constraint_penalty: An additive factor if the dimensional   constraint is violated.\ndimensionless_constants_only: Whether to only allow dimensionless   constants.\nuse_frequency: Whether to use a parsimony that adapts to the   relative proportion of equations at each complexity; this will   ensure that there are a balanced number of equations considered   for every complexity.\nuse_frequency_in_tournament: Whether to use the adaptive parsimony described   above inside the score, rather than just at the mutation accept/reject stage.\nadaptive_parsimony_scaling: How much to scale the adaptive parsimony term   in the loss. Increase this if the search is spending too much time   optimizing the most complex equations.\nturbo: Whether to use LoopVectorization.@turbo to evaluate expressions.   This can be significantly faster, but is only compatible with certain   operators. Experimental!\nbumper: Whether to use Bumper.jl for faster evaluation. Experimental!\nmigration: Whether to migrate equations between processes.\nhof_migration: Whether to migrate equations from the hall of fame   to processes.\nfraction_replaced: What fraction of each population to replace with   migrated equations at the end of each cycle.\nfraction_replaced_hof: What fraction to replace with hall of fame   equations at the end of each cycle.\nshould_simplify: Whether to simplify equations. If you   pass a custom objective, this will be set to false.\nshould_optimize_constants: Whether to use an optimization algorithm   to periodically optimize constants in equations.\noptimizer_algorithm: Select algorithm to use for optimizing constants. Default   is Optim.BFGS(linesearch=LineSearches.BackTracking()).\noptimizer_nrestarts: How many different random starting positions to consider   for optimization of constants.\noptimizer_probability: Probability of performing optimization of constants at   the end of a given iteration.\noptimizer_iterations: How many optimization iterations to perform. This gets  passed to Optim.Options as iterations. The default is 8.\noptimizer_f_calls_limit: How many function calls to allow during optimization.   This gets passed to Optim.Options as f_calls_limit. The default is   0 which means no limit.\noptimizer_options: General options for the constant optimization. For details   we refer to the documentation on Optim.Options from the Optim.jl package.   Options can be provided here as NamedTuple, e.g. (iterations=16,), as a   Dict, e.g. Dict(:x_tol => 1.0e-32,), or as an Optim.Options instance.\noutput_file: What file to store equations to, as a backup.\nperturbation_factor: When mutating a constant, either   multiply or divide by (1+perturbation_factor)^(rand()+1).\nprobability_negate_constant: Probability of negating a constant in the equation   when mutating it.\nmutation_weights: Relative probabilities of the mutations. The struct   MutationWeights should be passed to these options.   See its documentation on MutationWeights for the different weights.\ncrossover_probability: Probability of performing crossover.\nannealing: Whether to use simulated annealing.\nwarmup_maxsize_by: Whether to slowly increase the max size from 5 up to   maxsize. If nonzero, specifies the fraction through the search   at which the maxsize should be reached.\nverbosity: Whether to print debugging statements or   not.\nprint_precision: How many digits to print when printing   equations. By default, this is 5.\nsave_to_file: Whether to save equations to a file during the search.\nbin_constraints: See constraints. This is the same, but specified for binary   operators only (for example, if you have an operator that is both a binary   and unary operator).\nuna_constraints: Likewise, for unary operators.\nseed: What random seed to use. nothing uses no seed.\nprogress: Whether to use a progress bar output (verbosity will   have no effect).\nearly_stop_condition: Float - whether to stop early if the mean loss gets below this value.   Function - a function taking (loss, complexity) as arguments and returning true or false.\ntimeout_in_seconds: Float64 - the time in seconds after which to exit (as an alternative to the number of iterations).\nmax_evals: Int (or Nothing) - the maximum number of evaluations of expressions to perform.\nskip_mutation_failures: Whether to simply skip over mutations that fail or are rejected, rather than to replace the mutated   expression with the original expression and proceed normally.\nnested_constraints: Specifies how many times a combination of operators can be nested. For example,   [sin => [cos => 0], cos => [cos => 2]] specifies that cos may never appear within a sin,   but sin can be nested with itself an unlimited number of times. The second term specifies that cos   can be nested up to 2 times within a cos, so that cos(cos(cos(x))) is allowed (as well as any combination   of + or - within it), but cos(cos(cos(cos(x)))) is not allowed. When an operator is not specified,   it is assumed that it can be nested an unlimited number of times. This requires that there is no operator   which is used both in the unary operators and the binary operators (e.g., - could be both subtract, and negation).   For binary operators, both arguments are treated the same way, and the max of each argument is constrained.\ndeterministic: Use a global counter for the birth time, rather than calls to time(). This gives   perfect resolution, and is therefore deterministic. However, it is not thread safe, and must be used   in serial mode.\ndefine_helper_functions: Whether to define helper functions   for constructing and evaluating trees.\nniterations::Int=10: The number of iterations to perform the search.   More iterations will improve the results.\nparallelism=:multithreading: What parallelism mode to use.   The options are :multithreading, :multiprocessing, and :serial.   By default, multithreading will be used. Multithreading uses less memory,   but multiprocessing can handle multi-node compute. If using :multithreading   mode, the number of threads available to julia are used. If using   :multiprocessing, numprocs processes will be created dynamically if   procs is unset. If you have already allocated processes, pass them   to the procs argument and they will be used.   You may also pass a string instead of a symbol, like \"multithreading\".\nnumprocs::Union{Int, Nothing}=nothing:  The number of processes to use,   if you want equation_search to set this up automatically. By default   this will be 4, but can be any number (you should pick a number <=   the number of cores available).\nprocs::Union{Vector{Int}, Nothing}=nothing: If you have set up   a distributed run manually with procs = addprocs() and @everywhere,   pass the procs to this keyword argument.\naddprocs_function::Union{Function, Nothing}=nothing: If using multiprocessing   (parallelism=:multithreading), and are not passing procs manually,   then they will be allocated dynamically using addprocs. However,   you may also pass a custom function to use instead of addprocs.   This function should take a single positional argument,   which is the number of processes to use, as well as the lazy keyword argument.   For example, if set up on a slurm cluster, you could pass   addprocs_function = addprocs_slurm, which will set up slurm processes.\nheap_size_hint_in_bytes::Union{Int,Nothing}=nothing: On Julia 1.9+, you may set the --heap-size-hint   flag on Julia processes, recommending garbage collection once a process   is close to the recommended size. This is important for long-running distributed   jobs where each process has an independent memory, and can help avoid   out-of-memory errors. By default, this is set to Sys.free_memory() / numprocs.\nruntests::Bool=true: Whether to run (quick) tests before starting the   search, to see if there will be any problems during the equation search   related to the host environment.\nloss_type::Type=Nothing: If you would like to use a different type   for the loss than for the data you passed, specify the type here.   Note that if you pass complex data ::Complex{L}, then the loss   type will automatically be set to L.\nselection_method::Function: Function to selection expression from   the Pareto frontier for use in predict.   See SymbolicRegression.MLJInterfaceModule.choose_best for an example.   This function should return a single integer specifying   the index of the expression to use. By default, this maximizes   the score (a pound-for-pound rating) of expressions reaching the threshold   of 1.5x the minimum loss. To override this at prediction time, you can pass   a named tuple with keys data and idx to predict. See the Operations   section for details.\ndimensions_type::AbstractDimensions: The type of dimensions to use when storing   the units of the data. By default this is DynamicQuantities.SymbolicDimensions.\n\nOperations\n\npredict(mach, Xnew): Return predictions of the target given features Xnew, which should have same scitype as X above. The expression used for prediction is defined by the selection_method function, which can be seen by viewing report(mach).best_idx.\npredict(mach, (data=Xnew, idx=i)): Return predictions of the target given features Xnew, which should have same scitype as X above. By passing a named tuple with keys data and idx, you are able to specify the equation you wish to evaluate in idx.\n\nFitted parameters\n\nThe fields of fitted_params(mach) are:\n\nbest_idx::Int: The index of the best expression in the Pareto frontier,  as determined by the selection_method function. Override in predict by passing   a named tuple with keys data and idx.\nequations::Vector{Node{T}}: The expressions discovered by the search, represented in a dominating Pareto frontier (i.e., the best expressions found for each complexity). T is equal to the element type of the passed data.\nequation_strings::Vector{String}: The expressions discovered by the search, represented as strings for easy inspection.\n\nReport\n\nThe fields of report(mach) are:\n\nbest_idx::Int: The index of the best expression in the Pareto frontier,  as determined by the selection_method function. Override in predict by passing  a named tuple with keys data and idx.\nequations::Vector{Node{T}}: The expressions discovered by the search, represented in a dominating Pareto frontier (i.e., the best expressions found for each complexity).\nequation_strings::Vector{String}: The expressions discovered by the search, represented as strings for easy inspection.\ncomplexities::Vector{Int}: The complexity of each expression in the Pareto frontier.\nlosses::Vector{L}: The loss of each expression in the Pareto frontier, according to the loss function specified in the model. The type L is the loss type, which is usually the same as the element type of data passed (i.e., T), but can differ if complex data types are passed.\nscores::Vector{L}: A metric which considers both the complexity and loss of an expression, equal to the change in the log-loss divided by the change in complexity, relative to the previous expression along the Pareto frontier. A larger score aims to indicate an expression is more likely to be the true expression generating the data, but this is very problem-dependent and generally several other factors should be considered.\n\nExamples\n\nusing MLJ\nSRRegressor = @load SRRegressor pkg=SymbolicRegression\nX, y = @load_boston\nmodel = SRRegressor(binary_operators=[+, -, *], unary_operators=[exp], niterations=100)\nmach = machine(model, X, y)\nfit!(mach)\ny_hat = predict(mach, X)\n# View the equation used:\nr = report(mach)\nprintln(\"Equation used:\", r.equation_strings[r.best_idx])\n\nWith units and variable names:\n\nusing MLJ\nusing DynamicQuantities\nSRegressor = @load SRRegressor pkg=SymbolicRegression\n\nX = (; x1=rand(32) .* us\"km/h\", x2=rand(32) .* us\"km\")\ny = @. X.x2 / X.x1 + 0.5us\"h\"\nmodel = SRRegressor(binary_operators=[+, -, *, /])\nmach = machine(model, X, y)\nfit!(mach)\ny_hat = predict(mach, X)\n# View the equation used:\nr = report(mach)\nprintln(\"Equation used:\", r.equation_strings[r.best_idx])\n\nSee also MultitargetSRRegressor.\n\n\n\n\n\n","category":"type"},{"location":"api/#SymbolicRegression.MLJInterfaceModule.MultitargetSRRegressor","page":"API","title":"SymbolicRegression.MLJInterfaceModule.MultitargetSRRegressor","text":"MultitargetSRRegressor\n\nA model type for constructing a Multi-Target Symbolic Regression via Evolutionary Search, based on SymbolicRegression.jl, and implementing the MLJ model interface.\n\nFrom MLJ, the type can be imported using\n\nMultitargetSRRegressor = @load MultitargetSRRegressor pkg=SymbolicRegression\n\nDo model = MultitargetSRRegressor() to construct an instance with default hyper-parameters. Provide keyword arguments to override hyper-parameter defaults, as in MultitargetSRRegressor(binary_operators=...).\n\nMulti-target Symbolic Regression regressor (MultitargetSRRegressor) conducts several searches for expressions that predict each target variable from a set of input variables. All data is assumed to be Continuous. The search is performed using an evolutionary algorithm. This algorithm is described in the paper https://arxiv.org/abs/2305.01582.\n\nTraining data\n\nIn MLJ or MLJBase, bind an instance model to data with\n\nmach = machine(model, X, y)\n\nOR\n\nmach = machine(model, X, y, w)\n\nHere:\n\nX is any table of input features (eg, a DataFrame) whose columns are of scitype\n\nContinuous; check column scitypes with schema(X). Variable names in discovered expressions will be taken from the column names of X, if available. Units in columns of X (use DynamicQuantities for units) will trigger dimensional analysis to be used.\n\ny is the target, which can be any table of target variables whose element scitype is Continuous; check the scitype with schema(y). Units in columns of y (use DynamicQuantities for units) will trigger dimensional analysis to be used.\nw is the observation weights which can either be nothing (default) or an AbstractVector whoose element scitype is Count or Continuous. The same weights are used for all targets.\n\nTrain the machine using fit!(mach), inspect the discovered expressions with report(mach), and predict on new data with predict(mach, Xnew). Note that unlike other regressors, symbolic regression stores a list of lists of trained models. The models chosen from each of these lists is defined by the function selection_method keyword argument, which by default balances accuracy and complexity. You can override this at prediction time by passing a named tuple with keys data and idx.\n\nHyper-parameters\n\nbinary_operators: Vector of binary operators (functions) to use.   Each operator should be defined for two input scalars,   and one output scalar. All operators   need to be defined over the entire real line (excluding infinity - these   are stopped before they are input), or return NaN where not defined.   For speed, define it so it takes two reals   of the same type as input, and outputs the same type. For the SymbolicUtils   simplification backend, you will need to define a generic method of the   operator so it takes arbitrary types.\nunary_operators: Same, but for   unary operators (one input scalar, gives an output scalar).\nconstraints: Array of pairs specifying size constraints   for each operator. The constraints for a binary operator should be a 2-tuple   (e.g., (-1, -1)) and the constraints for a unary operator should be an Int.   A size constraint is a limit to the size of the subtree   in each argument of an operator. e.g., [(^)=>(-1, 3)] means that the   ^ operator can have arbitrary size (-1) in its left argument,   but a maximum size of 3 in its right argument. Default is   no constraints.\nbatching: Whether to evolve based on small mini-batches of data,   rather than the entire dataset.\nbatch_size: What batch size to use if using batching.\nelementwise_loss: What elementwise loss function to use. Can be one of   the following losses, or any other loss of type   SupervisedLoss. You can also pass a function that takes   a scalar target (left argument), and scalar predicted (right   argument), and returns a scalar. This will be averaged   over the predicted data. If weights are supplied, your   function should take a third argument for the weight scalar.   Included losses:       Regression:           - LPDistLoss{P}(),           - L1DistLoss(),           - L2DistLoss() (mean square),           - LogitDistLoss(),           - HuberLoss(d),           - L1EpsilonInsLoss(ϵ),           - L2EpsilonInsLoss(ϵ),           - PeriodicLoss(c),           - QuantileLoss(τ),       Classification:           - ZeroOneLoss(),           - PerceptronLoss(),           - L1HingeLoss(),           - SmoothedL1HingeLoss(γ),           - ModifiedHuberLoss(),           - L2MarginLoss(),           - ExpLoss(),           - SigmoidLoss(),           - DWDMarginLoss(q).\nloss_function: Alternatively, you may redefine the loss used   as any function of tree::AbstractExpressionNode{T}, dataset::Dataset{T},   and options::Options, so long as you output a non-negative   scalar of type T. This is useful if you want to use a loss   that takes into account derivatives, or correlations across   the dataset. This also means you could use a custom evaluation   for a particular expression. If you are using   batching=true, then your function should   accept a fourth argument idx, which is either nothing   (indicating that the full dataset should be used), or a vector   of indices to use for the batch.   For example,\n  function my_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\n      prediction, flag = eval_tree_array(tree, dataset.X, options)\n      if !flag\n          return L(Inf)\n      end\n      return sum((prediction .- dataset.y) .^ 2) / dataset.n\n  end\nnode_type::Type{N}=Node: The type of node to use for the search.   For example, Node or GraphNode.\npopulations: How many populations of equations to use.\npopulation_size: How many equations in each population.\nncycles_per_iteration: How many generations to consider per iteration.\ntournament_selection_n: Number of expressions considered in each tournament.\ntournament_selection_p: The fittest expression in a tournament is to be   selected with probability p, the next fittest with probability p*(1-p),   and so forth.\ntopn: Number of equations to return to the host process, and to   consider for the hall of fame.\ncomplexity_of_operators: What complexity should be assigned to each operator,   and the occurrence of a constant or variable. By default, this is 1   for all operators. Can be a real number as well, in which case   the complexity of an expression will be rounded to the nearest integer.   Input this in the form of, e.g., [(^) => 3, sin => 2].\ncomplexity_of_constants: What complexity should be assigned to use of a constant.   By default, this is 1.\ncomplexity_of_variables: What complexity should be assigned to use of a variable,   which can also be a vector indicating different per-variable complexity.   By default, this is 1.\nalpha: The probability of accepting an equation mutation   during regularized evolution is given by exp(-delta_loss/(alpha * T)),   where T goes from 1 to 0. Thus, alpha=infinite is the same as no annealing.\nmaxsize: Maximum size of equations during the search.\nmaxdepth: Maximum depth of equations during the search, by default   this is set equal to the maxsize.\nparsimony: A multiplicative factor for how much complexity is   punished.\ndimensional_constraint_penalty: An additive factor if the dimensional   constraint is violated.\ndimensionless_constants_only: Whether to only allow dimensionless   constants.\nuse_frequency: Whether to use a parsimony that adapts to the   relative proportion of equations at each complexity; this will   ensure that there are a balanced number of equations considered   for every complexity.\nuse_frequency_in_tournament: Whether to use the adaptive parsimony described   above inside the score, rather than just at the mutation accept/reject stage.\nadaptive_parsimony_scaling: How much to scale the adaptive parsimony term   in the loss. Increase this if the search is spending too much time   optimizing the most complex equations.\nturbo: Whether to use LoopVectorization.@turbo to evaluate expressions.   This can be significantly faster, but is only compatible with certain   operators. Experimental!\nbumper: Whether to use Bumper.jl for faster evaluation. Experimental!\nmigration: Whether to migrate equations between processes.\nhof_migration: Whether to migrate equations from the hall of fame   to processes.\nfraction_replaced: What fraction of each population to replace with   migrated equations at the end of each cycle.\nfraction_replaced_hof: What fraction to replace with hall of fame   equations at the end of each cycle.\nshould_simplify: Whether to simplify equations. If you   pass a custom objective, this will be set to false.\nshould_optimize_constants: Whether to use an optimization algorithm   to periodically optimize constants in equations.\noptimizer_algorithm: Select algorithm to use for optimizing constants. Default   is Optim.BFGS(linesearch=LineSearches.BackTracking()).\noptimizer_nrestarts: How many different random starting positions to consider   for optimization of constants.\noptimizer_probability: Probability of performing optimization of constants at   the end of a given iteration.\noptimizer_iterations: How many optimization iterations to perform. This gets  passed to Optim.Options as iterations. The default is 8.\noptimizer_f_calls_limit: How many function calls to allow during optimization.   This gets passed to Optim.Options as f_calls_limit. The default is   0 which means no limit.\noptimizer_options: General options for the constant optimization. For details   we refer to the documentation on Optim.Options from the Optim.jl package.   Options can be provided here as NamedTuple, e.g. (iterations=16,), as a   Dict, e.g. Dict(:x_tol => 1.0e-32,), or as an Optim.Options instance.\noutput_file: What file to store equations to, as a backup.\nperturbation_factor: When mutating a constant, either   multiply or divide by (1+perturbation_factor)^(rand()+1).\nprobability_negate_constant: Probability of negating a constant in the equation   when mutating it.\nmutation_weights: Relative probabilities of the mutations. The struct   MutationWeights should be passed to these options.   See its documentation on MutationWeights for the different weights.\ncrossover_probability: Probability of performing crossover.\nannealing: Whether to use simulated annealing.\nwarmup_maxsize_by: Whether to slowly increase the max size from 5 up to   maxsize. If nonzero, specifies the fraction through the search   at which the maxsize should be reached.\nverbosity: Whether to print debugging statements or   not.\nprint_precision: How many digits to print when printing   equations. By default, this is 5.\nsave_to_file: Whether to save equations to a file during the search.\nbin_constraints: See constraints. This is the same, but specified for binary   operators only (for example, if you have an operator that is both a binary   and unary operator).\nuna_constraints: Likewise, for unary operators.\nseed: What random seed to use. nothing uses no seed.\nprogress: Whether to use a progress bar output (verbosity will   have no effect).\nearly_stop_condition: Float - whether to stop early if the mean loss gets below this value.   Function - a function taking (loss, complexity) as arguments and returning true or false.\ntimeout_in_seconds: Float64 - the time in seconds after which to exit (as an alternative to the number of iterations).\nmax_evals: Int (or Nothing) - the maximum number of evaluations of expressions to perform.\nskip_mutation_failures: Whether to simply skip over mutations that fail or are rejected, rather than to replace the mutated   expression with the original expression and proceed normally.\nnested_constraints: Specifies how many times a combination of operators can be nested. For example,   [sin => [cos => 0], cos => [cos => 2]] specifies that cos may never appear within a sin,   but sin can be nested with itself an unlimited number of times. The second term specifies that cos   can be nested up to 2 times within a cos, so that cos(cos(cos(x))) is allowed (as well as any combination   of + or - within it), but cos(cos(cos(cos(x)))) is not allowed. When an operator is not specified,   it is assumed that it can be nested an unlimited number of times. This requires that there is no operator   which is used both in the unary operators and the binary operators (e.g., - could be both subtract, and negation).   For binary operators, both arguments are treated the same way, and the max of each argument is constrained.\ndeterministic: Use a global counter for the birth time, rather than calls to time(). This gives   perfect resolution, and is therefore deterministic. However, it is not thread safe, and must be used   in serial mode.\ndefine_helper_functions: Whether to define helper functions   for constructing and evaluating trees.\nniterations::Int=10: The number of iterations to perform the search.   More iterations will improve the results.\nparallelism=:multithreading: What parallelism mode to use.   The options are :multithreading, :multiprocessing, and :serial.   By default, multithreading will be used. Multithreading uses less memory,   but multiprocessing can handle multi-node compute. If using :multithreading   mode, the number of threads available to julia are used. If using   :multiprocessing, numprocs processes will be created dynamically if   procs is unset. If you have already allocated processes, pass them   to the procs argument and they will be used.   You may also pass a string instead of a symbol, like \"multithreading\".\nnumprocs::Union{Int, Nothing}=nothing:  The number of processes to use,   if you want equation_search to set this up automatically. By default   this will be 4, but can be any number (you should pick a number <=   the number of cores available).\nprocs::Union{Vector{Int}, Nothing}=nothing: If you have set up   a distributed run manually with procs = addprocs() and @everywhere,   pass the procs to this keyword argument.\naddprocs_function::Union{Function, Nothing}=nothing: If using multiprocessing   (parallelism=:multithreading), and are not passing procs manually,   then they will be allocated dynamically using addprocs. However,   you may also pass a custom function to use instead of addprocs.   This function should take a single positional argument,   which is the number of processes to use, as well as the lazy keyword argument.   For example, if set up on a slurm cluster, you could pass   addprocs_function = addprocs_slurm, which will set up slurm processes.\nheap_size_hint_in_bytes::Union{Int,Nothing}=nothing: On Julia 1.9+, you may set the --heap-size-hint   flag on Julia processes, recommending garbage collection once a process   is close to the recommended size. This is important for long-running distributed   jobs where each process has an independent memory, and can help avoid   out-of-memory errors. By default, this is set to Sys.free_memory() / numprocs.\nruntests::Bool=true: Whether to run (quick) tests before starting the   search, to see if there will be any problems during the equation search   related to the host environment.\nloss_type::Type=Nothing: If you would like to use a different type   for the loss than for the data you passed, specify the type here.   Note that if you pass complex data ::Complex{L}, then the loss   type will automatically be set to L.\nselection_method::Function: Function to selection expression from   the Pareto frontier for use in predict.   See SymbolicRegression.MLJInterfaceModule.choose_best for an example.   This function should return a single integer specifying   the index of the expression to use. By default, this maximizes   the score (a pound-for-pound rating) of expressions reaching the threshold   of 1.5x the minimum loss. To override this at prediction time, you can pass   a named tuple with keys data and idx to predict. See the Operations   section for details.\ndimensions_type::AbstractDimensions: The type of dimensions to use when storing   the units of the data. By default this is DynamicQuantities.SymbolicDimensions.\n\nOperations\n\npredict(mach, Xnew): Return predictions of the target given features Xnew, which should have same scitype as X above. The expression used for prediction is defined by the selection_method function, which can be seen by viewing report(mach).best_idx.\npredict(mach, (data=Xnew, idx=i)): Return predictions of the target given features Xnew, which should have same scitype as X above. By passing a named tuple with keys data and idx, you are able to specify the equation you wish to evaluate in idx.\n\nFitted parameters\n\nThe fields of fitted_params(mach) are:\n\nbest_idx::Vector{Int}: The index of the best expression in each Pareto frontier, as determined by the selection_method function. Override in predict by passing a named tuple with keys data and idx.\nequations::Vector{Vector{Node{T}}}: The expressions discovered by the search, represented in a dominating Pareto frontier (i.e., the best expressions found for each complexity). The outer vector is indexed by target variable, and the inner vector is ordered by increasing complexity. T is equal to the element type of the passed data.\nequation_strings::Vector{Vector{String}}: The expressions discovered by the search, represented as strings for easy inspection.\n\nReport\n\nThe fields of report(mach) are:\n\nbest_idx::Vector{Int}: The index of the best expression in each Pareto frontier,  as determined by the selection_method function. Override in predict by passing  a named tuple with keys data and idx.\nequations::Vector{Vector{Node{T}}}: The expressions discovered by the search, represented in a dominating Pareto frontier (i.e., the best expressions found for each complexity). The outer vector is indexed by target variable, and the inner vector is ordered by increasing complexity.\nequation_strings::Vector{Vector{String}}: The expressions discovered by the search, represented as strings for easy inspection.\ncomplexities::Vector{Vector{Int}}: The complexity of each expression in each Pareto frontier.\nlosses::Vector{Vector{L}}: The loss of each expression in each Pareto frontier, according to the loss function specified in the model. The type L is the loss type, which is usually the same as the element type of data passed (i.e., T), but can differ if complex data types are passed.\nscores::Vector{Vector{L}}: A metric which considers both the complexity and loss of an expression, equal to the change in the log-loss divided by the change in complexity, relative to the previous expression along the Pareto frontier. A larger score aims to indicate an expression is more likely to be the true expression generating the data, but this is very problem-dependent and generally several other factors should be considered.\n\nExamples\n\nusing MLJ\nMultitargetSRRegressor = @load MultitargetSRRegressor pkg=SymbolicRegression\nX = (a=rand(100), b=rand(100), c=rand(100))\nY = (y1=(@. cos(X.c) * 2.1 - 0.9), y2=(@. X.a * X.b + X.c))\nmodel = MultitargetSRRegressor(binary_operators=[+, -, *], unary_operators=[exp], niterations=100)\nmach = machine(model, X, Y)\nfit!(mach)\ny_hat = predict(mach, X)\n# View the equations used:\nr = report(mach)\nfor (output_index, (eq, i)) in enumerate(zip(r.equation_strings, r.best_idx))\n    println(\"Equation used for \", output_index, \": \", eq[i])\nend\n\nSee also SRRegressor.\n\n\n\n\n\n","category":"type"},{"location":"api/#equation_search","page":"API","title":"equation_search","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"equation_search(X::AbstractMatrix{T}, y::AbstractMatrix{T};\n        niterations::Int=10,\n        weights::Union{AbstractVector{T}, Nothing}=nothing,\n        variable_names::Union{Array{String, 1}, Nothing}=nothing,\n        options::Options=Options(),\n        numprocs::Union{Int, Nothing}=nothing,\n        procs::Union{Array{Int, 1}, Nothing}=nothing,\n        runtests::Bool=true,\n        loss_type::Type=Nothing,\n) where {T<:DATA_TYPE}","category":"page"},{"location":"api/#SymbolicRegression.equation_search-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}}} where T<:Number","page":"API","title":"SymbolicRegression.equation_search","text":"equation_search(X, y[; kws...])\n\nPerform a distributed equation search for functions f_i which describe the mapping f_i(X[:, j]) ≈ y[i, j]. Options are configured using SymbolicRegression.Options(...), which should be passed as a keyword argument to options. One can turn off parallelism with numprocs=0, which is useful for debugging and profiling.\n\nArguments\n\nX::AbstractMatrix{T}:  The input dataset to predict y from.   The first dimension is features, the second dimension is rows.\ny::Union{AbstractMatrix{T}, AbstractVector{T}}: The values to predict. The first dimension   is the output feature to predict with each equation, and the   second dimension is rows.\nniterations::Int=10: The number of iterations to perform the search.   More iterations will improve the results.\nweights::Union{AbstractMatrix{T}, AbstractVector{T}, Nothing}=nothing: Optionally   weight the loss for each y by this value (same shape as y).\noptions::Options=Options(): The options for the search, such as   which operators to use, evolution hyperparameters, etc.\nvariable_names::Union{Vector{String}, Nothing}=nothing: The names   of each feature in X, which will be used during printing of equations.\ndisplay_variable_names::Union{Vector{String}, Nothing}=variable_names: Names   to use when printing expressions during the search, but not when saving   to an equation file.\ny_variable_names::Union{String,AbstractVector{String},Nothing}=nothing: The   names of each output feature in y, which will be used during printing   of equations.\nparallelism=:multithreading: What parallelism mode to use.   The options are :multithreading, :multiprocessing, and :serial.   By default, multithreading will be used. Multithreading uses less memory,   but multiprocessing can handle multi-node compute. If using :multithreading   mode, the number of threads available to julia are used. If using   :multiprocessing, numprocs processes will be created dynamically if   procs is unset. If you have already allocated processes, pass them   to the procs argument and they will be used.   You may also pass a string instead of a symbol, like \"multithreading\".\nnumprocs::Union{Int, Nothing}=nothing:  The number of processes to use,   if you want equation_search to set this up automatically. By default   this will be 4, but can be any number (you should pick a number <=   the number of cores available).\nprocs::Union{Vector{Int}, Nothing}=nothing: If you have set up   a distributed run manually with procs = addprocs() and @everywhere,   pass the procs to this keyword argument.\naddprocs_function::Union{Function, Nothing}=nothing: If using multiprocessing   (parallelism=:multithreading), and are not passing procs manually,   then they will be allocated dynamically using addprocs. However,   you may also pass a custom function to use instead of addprocs.   This function should take a single positional argument,   which is the number of processes to use, as well as the lazy keyword argument.   For example, if set up on a slurm cluster, you could pass   addprocs_function = addprocs_slurm, which will set up slurm processes.\nheap_size_hint_in_bytes::Union{Int,Nothing}=nothing: On Julia 1.9+, you may set the --heap-size-hint   flag on Julia processes, recommending garbage collection once a process   is close to the recommended size. This is important for long-running distributed   jobs where each process has an independent memory, and can help avoid   out-of-memory errors. By default, this is set to Sys.free_memory() / numprocs.\nruntests::Bool=true: Whether to run (quick) tests before starting the   search, to see if there will be any problems during the equation search   related to the host environment.\nsaved_state=nothing: If you have already   run equation_search and want to resume it, pass the state here.   To get this to work, you need to have set returnstate=true,   which will cause `equationsearch` to return the state. The second   element of the state is the regular return value with the hall of fame.   Note that you cannot change the operators or dataset, but most other options   should be changeable.\nreturn_state::Union{Bool, Nothing}=nothing: Whether to return the   state of the search for warm starts. By default this is false.\nloss_type::Type=Nothing: If you would like to use a different type   for the loss than for the data you passed, specify the type here.   Note that if you pass complex data ::Complex{L}, then the loss   type will automatically be set to L.\nverbosity: Whether to print debugging statements or not.\nprogress: Whether to use a progress bar output. Only available for   single target output.\nX_units::Union{AbstractVector,Nothing}=nothing: The units of the dataset,   to be used for dimensional constraints. For example, if X_units=[\"kg\", \"m\"],   then the first feature will have units of kilograms, and the second will   have units of meters.\ny_units=nothing: The units of the output, to be used for dimensional constraints.   If y is a matrix, then this can be a vector of units, in which case   each element corresponds to each output feature.\n\nReturns\n\nhallOfFame::HallOfFame: The best equations seen during the search.   hallOfFame.members gives an array of PopMember objects, which   have their tree (equation) stored in .tree. Their score (loss)   is given in .score. The array of PopMember objects   is enumerated by size from 1 to options.maxsize.\n\n\n\n\n\n","category":"method"},{"location":"api/#Options","page":"API","title":"Options","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Options\nMutationWeights(;)","category":"page"},{"location":"api/#SymbolicRegression.CoreModule.OptionsStructModule.Options","page":"API","title":"SymbolicRegression.CoreModule.OptionsStructModule.Options","text":"Options(;kws...)\n\nConstruct options for equation_search and other functions. The current arguments have been tuned using the median values from https://github.com/MilesCranmer/PySR/discussions/115.\n\nArguments\n\nbinary_operators: Vector of binary operators (functions) to use.   Each operator should be defined for two input scalars,   and one output scalar. All operators   need to be defined over the entire real line (excluding infinity - these   are stopped before they are input), or return NaN where not defined.   For speed, define it so it takes two reals   of the same type as input, and outputs the same type. For the SymbolicUtils   simplification backend, you will need to define a generic method of the   operator so it takes arbitrary types.\nunary_operators: Same, but for   unary operators (one input scalar, gives an output scalar).\nconstraints: Array of pairs specifying size constraints   for each operator. The constraints for a binary operator should be a 2-tuple   (e.g., (-1, -1)) and the constraints for a unary operator should be an Int.   A size constraint is a limit to the size of the subtree   in each argument of an operator. e.g., [(^)=>(-1, 3)] means that the   ^ operator can have arbitrary size (-1) in its left argument,   but a maximum size of 3 in its right argument. Default is   no constraints.\nbatching: Whether to evolve based on small mini-batches of data,   rather than the entire dataset.\nbatch_size: What batch size to use if using batching.\nelementwise_loss: What elementwise loss function to use. Can be one of   the following losses, or any other loss of type   SupervisedLoss. You can also pass a function that takes   a scalar target (left argument), and scalar predicted (right   argument), and returns a scalar. This will be averaged   over the predicted data. If weights are supplied, your   function should take a third argument for the weight scalar.   Included losses:       Regression:           - LPDistLoss{P}(),           - L1DistLoss(),           - L2DistLoss() (mean square),           - LogitDistLoss(),           - HuberLoss(d),           - L1EpsilonInsLoss(ϵ),           - L2EpsilonInsLoss(ϵ),           - PeriodicLoss(c),           - QuantileLoss(τ),       Classification:           - ZeroOneLoss(),           - PerceptronLoss(),           - L1HingeLoss(),           - SmoothedL1HingeLoss(γ),           - ModifiedHuberLoss(),           - L2MarginLoss(),           - ExpLoss(),           - SigmoidLoss(),           - DWDMarginLoss(q).\nloss_function: Alternatively, you may redefine the loss used   as any function of tree::AbstractExpressionNode{T}, dataset::Dataset{T},   and options::Options, so long as you output a non-negative   scalar of type T. This is useful if you want to use a loss   that takes into account derivatives, or correlations across   the dataset. This also means you could use a custom evaluation   for a particular expression. If you are using   batching=true, then your function should   accept a fourth argument idx, which is either nothing   (indicating that the full dataset should be used), or a vector   of indices to use for the batch.   For example,\n  function my_loss(tree, dataset::Dataset{T,L}, options)::L where {T,L}\n      prediction, flag = eval_tree_array(tree, dataset.X, options)\n      if !flag\n          return L(Inf)\n      end\n      return sum((prediction .- dataset.y) .^ 2) / dataset.n\n  end\nnode_type::Type{N}=Node: The type of node to use for the search.   For example, Node or GraphNode.\npopulations: How many populations of equations to use.\npopulation_size: How many equations in each population.\nncycles_per_iteration: How many generations to consider per iteration.\ntournament_selection_n: Number of expressions considered in each tournament.\ntournament_selection_p: The fittest expression in a tournament is to be   selected with probability p, the next fittest with probability p*(1-p),   and so forth.\ntopn: Number of equations to return to the host process, and to   consider for the hall of fame.\ncomplexity_of_operators: What complexity should be assigned to each operator,   and the occurrence of a constant or variable. By default, this is 1   for all operators. Can be a real number as well, in which case   the complexity of an expression will be rounded to the nearest integer.   Input this in the form of, e.g., [(^) => 3, sin => 2].\ncomplexity_of_constants: What complexity should be assigned to use of a constant.   By default, this is 1.\ncomplexity_of_variables: What complexity should be assigned to use of a variable,   which can also be a vector indicating different per-variable complexity.   By default, this is 1.\nalpha: The probability of accepting an equation mutation   during regularized evolution is given by exp(-delta_loss/(alpha * T)),   where T goes from 1 to 0. Thus, alpha=infinite is the same as no annealing.\nmaxsize: Maximum size of equations during the search.\nmaxdepth: Maximum depth of equations during the search, by default   this is set equal to the maxsize.\nparsimony: A multiplicative factor for how much complexity is   punished.\ndimensional_constraint_penalty: An additive factor if the dimensional   constraint is violated.\ndimensionless_constants_only: Whether to only allow dimensionless   constants.\nuse_frequency: Whether to use a parsimony that adapts to the   relative proportion of equations at each complexity; this will   ensure that there are a balanced number of equations considered   for every complexity.\nuse_frequency_in_tournament: Whether to use the adaptive parsimony described   above inside the score, rather than just at the mutation accept/reject stage.\nadaptive_parsimony_scaling: How much to scale the adaptive parsimony term   in the loss. Increase this if the search is spending too much time   optimizing the most complex equations.\nturbo: Whether to use LoopVectorization.@turbo to evaluate expressions.   This can be significantly faster, but is only compatible with certain   operators. Experimental!\nbumper: Whether to use Bumper.jl for faster evaluation. Experimental!\nmigration: Whether to migrate equations between processes.\nhof_migration: Whether to migrate equations from the hall of fame   to processes.\nfraction_replaced: What fraction of each population to replace with   migrated equations at the end of each cycle.\nfraction_replaced_hof: What fraction to replace with hall of fame   equations at the end of each cycle.\nshould_simplify: Whether to simplify equations. If you   pass a custom objective, this will be set to false.\nshould_optimize_constants: Whether to use an optimization algorithm   to periodically optimize constants in equations.\noptimizer_algorithm: Select algorithm to use for optimizing constants. Default   is Optim.BFGS(linesearch=LineSearches.BackTracking()).\noptimizer_nrestarts: How many different random starting positions to consider   for optimization of constants.\noptimizer_probability: Probability of performing optimization of constants at   the end of a given iteration.\noptimizer_iterations: How many optimization iterations to perform. This gets  passed to Optim.Options as iterations. The default is 8.\noptimizer_f_calls_limit: How many function calls to allow during optimization.   This gets passed to Optim.Options as f_calls_limit. The default is   0 which means no limit.\noptimizer_options: General options for the constant optimization. For details   we refer to the documentation on Optim.Options from the Optim.jl package.   Options can be provided here as NamedTuple, e.g. (iterations=16,), as a   Dict, e.g. Dict(:x_tol => 1.0e-32,), or as an Optim.Options instance.\noutput_file: What file to store equations to, as a backup.\nperturbation_factor: When mutating a constant, either   multiply or divide by (1+perturbation_factor)^(rand()+1).\nprobability_negate_constant: Probability of negating a constant in the equation   when mutating it.\nmutation_weights: Relative probabilities of the mutations. The struct   MutationWeights should be passed to these options.   See its documentation on MutationWeights for the different weights.\ncrossover_probability: Probability of performing crossover.\nannealing: Whether to use simulated annealing.\nwarmup_maxsize_by: Whether to slowly increase the max size from 5 up to   maxsize. If nonzero, specifies the fraction through the search   at which the maxsize should be reached.\nverbosity: Whether to print debugging statements or   not.\nprint_precision: How many digits to print when printing   equations. By default, this is 5.\nsave_to_file: Whether to save equations to a file during the search.\nbin_constraints: See constraints. This is the same, but specified for binary   operators only (for example, if you have an operator that is both a binary   and unary operator).\nuna_constraints: Likewise, for unary operators.\nseed: What random seed to use. nothing uses no seed.\nprogress: Whether to use a progress bar output (verbosity will   have no effect).\nearly_stop_condition: Float - whether to stop early if the mean loss gets below this value.   Function - a function taking (loss, complexity) as arguments and returning true or false.\ntimeout_in_seconds: Float64 - the time in seconds after which to exit (as an alternative to the number of iterations).\nmax_evals: Int (or Nothing) - the maximum number of evaluations of expressions to perform.\nskip_mutation_failures: Whether to simply skip over mutations that fail or are rejected, rather than to replace the mutated   expression with the original expression and proceed normally.\nnested_constraints: Specifies how many times a combination of operators can be nested. For example,   [sin => [cos => 0], cos => [cos => 2]] specifies that cos may never appear within a sin,   but sin can be nested with itself an unlimited number of times. The second term specifies that cos   can be nested up to 2 times within a cos, so that cos(cos(cos(x))) is allowed (as well as any combination   of + or - within it), but cos(cos(cos(cos(x)))) is not allowed. When an operator is not specified,   it is assumed that it can be nested an unlimited number of times. This requires that there is no operator   which is used both in the unary operators and the binary operators (e.g., - could be both subtract, and negation).   For binary operators, both arguments are treated the same way, and the max of each argument is constrained.\ndeterministic: Use a global counter for the birth time, rather than calls to time(). This gives   perfect resolution, and is therefore deterministic. However, it is not thread safe, and must be used   in serial mode.\ndefine_helper_functions: Whether to define helper functions   for constructing and evaluating trees.\n\n\n\n\n\n","category":"type"},{"location":"api/#Printing","page":"API","title":"Printing","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"string_tree(tree::Node, options::Options; kws...)","category":"page"},{"location":"api/#DynamicExpressions.StringsModule.string_tree-Tuple{Node, Options}","page":"API","title":"DynamicExpressions.StringsModule.string_tree","text":"string_tree(tree::AbstractExpressionNode, options::Options; kws...)\n\nConvert an equation to a string.\n\nArguments\n\ntree::AbstractExpressionNode: The equation to convert to a string.\noptions::Options: The options holding the definition of operators.\nvariable_names::Union{Array{String, 1}, Nothing}=nothing: what variables   to print for each feature.\n\n\n\n\n\n","category":"method"},{"location":"api/#Evaluation","page":"API","title":"Evaluation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"eval_tree_array(tree::Node, X::AbstractMatrix, options::Options; kws...)","category":"page"},{"location":"api/#DynamicExpressions.EvaluateEquationModule.eval_tree_array-Tuple{Node, AbstractMatrix, Options}","page":"API","title":"DynamicExpressions.EvaluateEquationModule.eval_tree_array","text":"eval_tree_array(tree::AbstractExpressionNode, X::AbstractArray, options::Options; kws...)\n\nEvaluate a binary tree (equation) over a given input data matrix. The operators contain all of the operators used. This function fuses doublets and triplets of operations for lower memory usage.\n\nThis function can be represented by the following pseudocode:\n\nfunction eval(current_node)\n    if current_node is leaf\n        return current_node.value\n    elif current_node is degree 1\n        return current_node.operator(eval(current_node.left_child))\n    else\n        return current_node.operator(eval(current_node.left_child), eval(current_node.right_child))\n\nThe bulk of the code is for optimizations and pre-emptive NaN/Inf checks, which speed up evaluation significantly.\n\nArguments\n\ntree::AbstractExpressionNode: The root node of the tree to evaluate.\nX::AbstractArray: The input data to evaluate the tree on.\noptions::Options: Options used to define the operators used in the tree.\n\nReturns\n\n(output, complete)::Tuple{AbstractVector, Bool}: the result,   which is a 1D array, as well as if the evaluation completed   successfully (true/false). A false complete means an infinity   or nan was encountered, and a large loss should be assigned   to the equation.\n\n\n\n\n\n","category":"method"},{"location":"api/#Derivatives","page":"API","title":"Derivatives","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"SymbolicRegression.jl can automatically and efficiently compute derivatives of expressions with respect to variables or constants. This is done using either eval_diff_tree_array, to compute derivative with respect to a single variable, or with eval_grad_tree_array, to compute the gradient with respect all variables (or, all constants). Both use forward-mode automatic, but use Zygote.jl to compute derivatives of each operator, so this is very efficient.","category":"page"},{"location":"api/","page":"API","title":"API","text":"eval_diff_tree_array(tree::Node, X::AbstractMatrix, options::Options, direction::Int)\neval_grad_tree_array(tree::Node, X::AbstractMatrix, options::Options; kws...)","category":"page"},{"location":"api/#DynamicExpressions.EvaluateEquationDerivativeModule.eval_diff_tree_array-Tuple{Node, AbstractMatrix, Options, Int64}","page":"API","title":"DynamicExpressions.EvaluateEquationDerivativeModule.eval_diff_tree_array","text":"eval_diff_tree_array(tree::AbstractExpressionNode, X::AbstractArray, options::Options, direction::Int)\n\nCompute the forward derivative of an expression, using a similar structure and optimization to evaltreearray. direction is the index of a particular variable in the expression. e.g., direction=1 would indicate derivative with respect to x1.\n\nArguments\n\ntree::AbstractExpressionNode: The expression tree to evaluate.\nX::AbstractArray: The data matrix, with each column being a data point.\noptions::Options: The options containing the operators used to create the tree.\ndirection::Int: The index of the variable to take the derivative with respect to.\n\nReturns\n\n(evaluation, derivative, complete)::Tuple{AbstractVector, AbstractVector, Bool}: the normal evaluation,   the derivative, and whether the evaluation completed as normal (or encountered a nan or inf).\n\n\n\n\n\n","category":"method"},{"location":"api/#DynamicExpressions.EvaluateEquationDerivativeModule.eval_grad_tree_array-Tuple{Node, AbstractMatrix, Options}","page":"API","title":"DynamicExpressions.EvaluateEquationDerivativeModule.eval_grad_tree_array","text":"eval_grad_tree_array(tree::AbstractExpressionNode, X::AbstractArray, options::Options; variable::Bool=false)\n\nCompute the forward-mode derivative of an expression, using a similar structure and optimization to evaltreearray. variable specifies whether we should take derivatives with respect to features (i.e., X), or with respect to every constant in the expression.\n\nArguments\n\ntree::AbstractExpressionNode: The expression tree to evaluate.\nX::AbstractArray: The data matrix, with each column being a data point.\noptions::Options: The options containing the operators used to create the tree.\nvariable::Bool: Whether to take derivatives with respect to features (i.e., X - with variable=true),   or with respect to every constant in the expression (variable=false).\n\nReturns\n\n(evaluation, gradient, complete)::Tuple{AbstractVector, AbstractArray, Bool}: the normal evaluation,   the gradient, and whether the evaluation completed as normal (or encountered a nan or inf).\n\n\n\n\n\n","category":"method"},{"location":"api/#SymbolicUtils.jl-interface","page":"API","title":"SymbolicUtils.jl interface","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"node_to_symbolic(tree::Node, options::Options;\n                     variable_names::Union{Array{String, 1}, Nothing}=nothing,\n                     index_functions::Bool=false)","category":"page"},{"location":"api/#DynamicExpressions.ExtensionInterfaceModule.node_to_symbolic-Tuple{Node, Options}","page":"API","title":"DynamicExpressions.ExtensionInterfaceModule.node_to_symbolic","text":"node_to_symbolic(tree::AbstractExpressionNode, options::Options; kws...)\n\nConvert an expression to SymbolicUtils.jl form.\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API","title":"API","text":"Note that use of this function requires SymbolicUtils.jl to be installed and loaded.","category":"page"},{"location":"api/#Pareto-frontier","page":"API","title":"Pareto frontier","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"calculate_pareto_frontier(hallOfFame::HallOfFame{T,L}) where {T<:DATA_TYPE,L<:LOSS_TYPE}","category":"page"},{"location":"api/#SymbolicRegression.HallOfFameModule.calculate_pareto_frontier-Union{Tuple{HallOfFame{T, L, N} where N<:AbstractExpressionNode{T}}, Tuple{L}, Tuple{T}} where {T<:Number, L<:Real}","page":"API","title":"SymbolicRegression.HallOfFameModule.calculate_pareto_frontier","text":"calculate_pareto_frontier(hallOfFame::HallOfFame{T,L,P}) where {T<:DATA_TYPE,L<:LOSS_TYPE}\n\n\n\n\n\n","category":"method"},{"location":"index_base/#Contents","page":"Contents","title":"Contents","text":"","category":"section"},{"location":"index_base/","page":"Contents","title":"Contents","text":"Pages = [\"examples.md\", \"api.md\", \"types.md\", \"losses.md\"]","category":"page"},{"location":"examples/#Toy-Examples-with-Code","page":"Examples","title":"Toy Examples with Code","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SymbolicRegression\nusing MLJ","category":"page"},{"location":"examples/#.-Simple-search","page":"Examples","title":"1. Simple search","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here's a simple example where we find the expression 2 cos(x4) + x1^2 - 2.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"X = 2randn(1000, 5)\ny = @. 2*cos(X[:, 4]) + X[:, 1]^2 - 2\n\nmodel = SRRegressor(\n    binary_operators=[+, -, *, /],\n    unary_operators=[cos],\n    niterations=30\n)\nmach = machine(model, X, y)\nfit!(mach)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let's look at the returned table:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"r = report(mach)\nr","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can get the selected best tradeoff expression with:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"r.equations[r.best_idx]","category":"page"},{"location":"examples/#.-Custom-operator","page":"Examples","title":"2. Custom operator","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here, we define a custom operator and use it to find an expression:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"X = 2randn(1000, 5)\ny = @. 1/X[:, 1]\n\nmy_inv(x) = 1/x\n\nmodel = SRRegressor(\n    binary_operators=[+, *],\n    unary_operators=[my_inv],\n)\nmach = machine(model, X, y)\nfit!(mach)\nr = report(mach)\nprintln(r.equations[r.best_idx])","category":"page"},{"location":"examples/#.-Multiple-outputs","page":"Examples","title":"3. Multiple outputs","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here, we do the same thing, but with multiple expressions at once, each requiring a different feature. This means that we need to use MultitargetSRRegressor instead of SRRegressor:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"X = 2rand(1000, 5) .+ 0.1\ny = @. 1/X[:, 1:3]\n\nmy_inv(x) = 1/x\n\nmodel = MultitargetSRRegressor(; binary_operators=[+, *], unary_operators=[my_inv])\nmach = machine(model, X, y)\nfit!(mach)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The report gives us lists of expressions instead:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"r = report(mach)\nfor i in 1:3\n    println(\"y[$(i)] = \", r.equations[i][r.best_idx[i]])\nend","category":"page"},{"location":"examples/#.-Plotting-an-expression","page":"Examples","title":"4. Plotting an expression","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"For now, let's consider the expressions for output 1 from the previous example: We can get a SymbolicUtils version with:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SymbolicUtils\n\neqn = node_to_symbolic(r.equations[1][r.best_idx[1]], model)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can get the LaTeX version with Latexify:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Latexify\n\nlatexify(string(eqn))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also plot the prediction against the truth:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\n\nypred = predict(mach, X)\nscatter(y[1, :], ypred[1, :], xlabel=\"Truth\", ylabel=\"Prediction\")","category":"page"},{"location":"examples/#.-Other-types","page":"Examples","title":"5. Other types","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"SymbolicRegression.jl can handle most numeric types you wish to use. For example, passing a Float32 array will result in the search using 32-bit precision everywhere in the codebase:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"X = 2randn(Float32, 1000, 5)\ny = @. 2*cos(X[:, 4]) + X[:, 1]^2 - 2\n\nmodel = SRRegressor(binary_operators=[+, -, *, /], unary_operators=[cos], niterations=30)\nmach = machine(model, X, y)\nfit!(mach)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"we can see that the output types are Float32:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"r = report(mach)\nbest = r.equations[r.best_idx]\nprintln(typeof(best))\n# Node{Float32}","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also use Complex numbers (ignore the warning from MLJ):","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"cos_re(x::Complex{T}) where {T} = cos(abs(x)) + 0im\n\nX = 15 .* rand(ComplexF64, 1000, 5) .- 7.5\ny = @. 2*cos_re((2+1im) * X[:, 4]) + 0.1 * X[:, 1]^2 - 2\n\nmodel = SRRegressor(\n    binary_operators=[+, -, *, /],\n    unary_operators=[cos_re],\n    maxsize=30,\n    niterations=100\n)\nmach = machine(model, X, y)\nfit!(mach)","category":"page"},{"location":"examples/#.-Dimensional-constraints","page":"Examples","title":"6. Dimensional constraints","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"One other feature we can exploit is dimensional analysis. Say that we know the physical units of each feature and output, and we want to find an expression that is dimensionally consistent.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can do this as follows, using DynamicQuantities to assign units. First, let's make some data on Newton's law of gravitation:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DynamicQuantities\nusing SymbolicRegression\n\nM = (rand(100) .+ 0.1) .* Constants.M_sun\nm = 100 .* (rand(100) .+ 0.1) .* u\"kg\"\nr = (rand(100) .+ 0.1) .* Constants.R_earth\n\nG = Constants.G\n\nF = @. (G * M * m / r^2)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Note that the u macro from DynamicQuantities will automatically convert to SI units. To avoid this, use the us macro.)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, let's ready the data for MLJ:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"X = (; M=M, m=m, r=r)\ny = F","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Since this data has such a large dynamic range, let's also create a custom loss function that looks at the error in log-space:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"function loss_fnc(prediction, target)\n    # Useful loss for large dynamic range\n    scatter_loss = abs(log((abs(prediction)+1e-20) / (abs(target)+1e-20)))\n    sign_loss = 10 * (sign(prediction) - sign(target))^2\n    return scatter_loss + sign_loss\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now let's define and fit our model:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"model = SRRegressor(\n    binary_operators=[+, -, *, /],\n    unary_operators=[square],\n    elementwise_loss=loss_fnc,\n    complexity_of_constants=2,\n    maxsize=25,\n    niterations=100,\n    populations=50,\n    dimensional_constraint_penalty=10^5,\n)\nmach = machine(model, X, y)\nfit!(mach)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can observe that all expressions with a loss under our penalty are dimensionally consistent! (The \"[?]\" indicates free units in a constant, which can cancel out other units in the expression.) For example,","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"\"y[m s⁻² kg] = (M[kg] * 2.6353e-22[?])\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"would indicate that the expression is dimensionally consistent, with a constant \"2.6353e-22[m s⁻²]\".","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that you can also search for dimensionless units by settings dimensionless_constants_only to true.","category":"page"},{"location":"examples/#.-Additional-features","page":"Examples","title":"7. Additional features","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"For the many other features available in SymbolicRegression.jl, check out the API page for Options. You might also find it useful to browse the documentation for the Python frontend PySR, which has additional documentation. In particular, the tuning page is useful for improving search performance.","category":"page"},{"location":"losses/#Losses","page":"Losses","title":"Losses","text":"","category":"section"},{"location":"losses/","page":"Losses","title":"Losses","text":"These losses, and their documentation, are included from the LossFunctions.jl package.","category":"page"},{"location":"losses/","page":"Losses","title":"Losses","text":"Pass the function as, e.g., elementwise_loss=L1DistLoss().","category":"page"},{"location":"losses/","page":"Losses","title":"Losses","text":"You can also declare your own loss as a function that takes two (unweighted) or three (weighted) scalar arguments. For example,","category":"page"},{"location":"losses/","page":"Losses","title":"Losses","text":"f(x, y, w) = abs(x-y)*w\noptions = Options(elementwise_loss=f)","category":"page"},{"location":"losses/#Regression","page":"Losses","title":"Regression","text":"","category":"section"},{"location":"losses/","page":"Losses","title":"Losses","text":"Regression losses work on the distance between targets and predictions: r = x - y.","category":"page"},{"location":"losses/","page":"Losses","title":"Losses","text":"LPDistLoss{P}\nL1DistLoss\nL2DistLoss\nPeriodicLoss\nHuberLoss\nL1EpsilonInsLoss\nL2EpsilonInsLoss\nLogitDistLoss\nQuantileLoss","category":"page"},{"location":"losses/#LossFunctions.LPDistLoss","page":"Losses","title":"LossFunctions.LPDistLoss","text":"LPDistLoss{P} <: DistanceLoss\n\nThe P-th power absolute distance loss. It is Lipschitz continuous iff P == 1, convex if and only if P >= 1, and strictly convex iff P > 1.\n\nL(r) = r^P\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L1DistLoss","page":"Losses","title":"LossFunctions.L1DistLoss","text":"L1DistLoss <: DistanceLoss\n\nThe absolute distance loss. Special case of the LPDistLoss with P=1. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(r) = r\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    3 │\\.                     ./│    1 │            ┌------------│\n      │ '\\.                 ./' │      │            |            │\n      │   \\.               ./   │      │            |            │\n      │    '\\.           ./'    │      │_           |           _│\n    L │      \\.         ./      │   L' │            |            │\n      │       '\\.     ./'       │      │            |            │\n      │         \\.   ./         │      │            |            │\n    0 │          '\\./'          │   -1 │------------┘            │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -3                        3      -3                        3\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L2DistLoss","page":"Losses","title":"LossFunctions.L2DistLoss","text":"L2DistLoss <: DistanceLoss\n\nThe least squares loss. Special case of the LPDistLoss with P=2. It is strictly convex.\n\nL(r) = r^2\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    9 │\\                       /│    3 │                   .r/   │\n      │\".                     .\"│      │                 .r'     │\n      │ \".                   .\" │      │              _./'       │\n      │  \".                 .\"  │      │_           .r/         _│\n    L │   \".               .\"   │   L' │         _:/'            │\n      │    '\\.           ./'    │      │       .r'               │\n      │      \\.         ./      │      │     .r'                 │\n    0 │        \"-.___.-\"        │   -3 │  _/r'                   │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -3                        3      -2                        2\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.PeriodicLoss","page":"Losses","title":"LossFunctions.PeriodicLoss","text":"PeriodicLoss <: DistanceLoss\n\nMeasures distance on a circle of specified circumference c.\n\nL(r) = 1 - cos left( frac2 r pic right)\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.HuberLoss","page":"Losses","title":"LossFunctions.HuberLoss","text":"HuberLoss <: DistanceLoss\n\nLoss function commonly used for robustness to outliers. For large values of d it becomes close to the L1DistLoss, while for small values of d it resembles the L2DistLoss. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(r) = begincases fracr^22  quad textif   r  le alpha  alpha  r  - fracalpha^32  quad textotherwise endcases\n\n\n\n              Lossfunction (d=1)               Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │                         │    1 │                .+-------│\n      │                         │      │              ./'        │\n      │\\.                     ./│      │             ./          │\n      │ '.                   .' │      │_           ./          _│\n    L │   \\.               ./   │   L' │           /'            │\n      │     \\.           ./     │      │          /'             │\n      │      '.         .'      │      │        ./'              │\n    0 │        '-.___.-'        │   -1 │-------+'                │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L1EpsilonInsLoss","page":"Losses","title":"LossFunctions.L1EpsilonInsLoss","text":"L1EpsilonInsLoss <: DistanceLoss\n\nThe ϵ-insensitive loss. Typically used in linear support vector regression. It ignores deviances smaller than ϵ, but penalizes larger deviances linarily. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(r) = max  0  r  - epsilon \n\n\n\n              Lossfunction (ϵ=1)               Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │\\                       /│    1 │                  ┌------│\n      │ \\                     / │      │                  |      │\n      │  \\                   /  │      │                  |      │\n      │   \\                 /   │      │_      ___________!     _│\n    L │    \\               /    │   L' │      |                  │\n      │     \\             /     │      │      |                  │\n      │      \\           /      │      │      |                  │\n    0 │       \\_________/       │   -1 │------┘                  │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -3                        3      -2                        2\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L2EpsilonInsLoss","page":"Losses","title":"LossFunctions.L2EpsilonInsLoss","text":"L2EpsilonInsLoss <: DistanceLoss\n\nThe quadratic ϵ-insensitive loss. Typically used in linear support vector regression. It ignores deviances smaller than ϵ, but penalizes larger deviances quadratically. It is convex, but not strictly convex.\n\nL(r) = max  0  r  - epsilon ^2\n\n\n\n              Lossfunction (ϵ=0.5)             Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    8 │                         │    1 │                  /      │\n      │:                       :│      │                 /       │\n      │'.                     .'│      │                /        │\n      │ \\.                   ./ │      │_         _____/        _│\n    L │  \\.                 ./  │   L' │         /               │\n      │   \\.               ./   │      │        /                │\n      │    '\\.           ./'    │      │       /                 │\n    0 │      '-._______.-'      │   -1 │      /                  │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -3                        3      -2                        2\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.LogitDistLoss","page":"Losses","title":"LossFunctions.LogitDistLoss","text":"LogitDistLoss <: DistanceLoss\n\nThe distance-based logistic loss for regression. It is strictly convex and Lipschitz continuous.\n\nL(r) = - ln frac4 e^r(1 + e^r)^2\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │                         │    1 │                   _--'''│\n      │\\                       /│      │                ./'      │\n      │ \\.                   ./ │      │              ./         │\n      │  '.                 .'  │      │_           ./          _│\n    L │   '.               .'   │   L' │           ./            │\n      │     \\.           ./     │      │         ./              │\n      │      '.         .'      │      │       ./                │\n    0 │        '-.___.-'        │   -1 │___.-''                  │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -3                        3      -4                        4\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.QuantileLoss","page":"Losses","title":"LossFunctions.QuantileLoss","text":"QuantileLoss <: DistanceLoss\n\nThe distance-based quantile loss, also known as pinball loss, can be used to estimate conditional τ-quantiles. It is Lipschitz continuous and convex, but not strictly convex. Furthermore it is symmetric if and only if τ = 1/2.\n\nL(r) = begincases -left( 1 - tau  right) r  quad textif  r  0  tau r  quad textif  r ge 0  endcases\n\n\n\n              Lossfunction (τ=0.7)             Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │'\\                       │  0.3 │            ┌------------│\n      │  \\.                     │      │            |            │\n      │   '\\                    │      │_           |           _│\n      │     \\.                  │      │            |            │\n    L │      '\\              ._-│   L' │            |            │\n      │        \\.         ..-'  │      │            |            │\n      │         '.     _r/'     │      │            |            │\n    0 │           '_./'         │ -0.7 │------------┘            │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -3                        3      -3                        3\n                 ŷ - y                            ŷ - y\n\n\n\n","category":"type"},{"location":"losses/#Classification","page":"Losses","title":"Classification","text":"","category":"section"},{"location":"losses/","page":"Losses","title":"Losses","text":"Classifications losses (assuming binary) work on the margin between targets and predictions: r = x y, assuming the target y is either -1 or +1.","category":"page"},{"location":"losses/","page":"Losses","title":"Losses","text":"ZeroOneLoss\nPerceptronLoss\nLogitMarginLoss\nL1HingeLoss\nL2HingeLoss\nSmoothedL1HingeLoss\nModifiedHuberLoss\nL2MarginLoss\nExpLoss\nSigmoidLoss\nDWDMarginLoss","category":"page"},{"location":"losses/#LossFunctions.ZeroOneLoss","page":"Losses","title":"LossFunctions.ZeroOneLoss","text":"ZeroOneLoss <: MarginLoss\n\nThe classical classification loss. It penalizes every misclassified observation with a loss of 1 while every correctly classified observation has a loss of 0. It is not convex nor continuous and thus seldom used directly. Instead one usually works with some classification-calibrated surrogate loss, such as L1HingeLoss.\n\nL(a) = begincases 1  quad textif  a  0  0  quad textif  a = 0 endcases\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    1 │------------┐            │    1 │                         │\n      │            |            │      │                         │\n      │            |            │      │                         │\n      │            |            │      │_________________________│\n      │            |            │      │                         │\n      │            |            │      │                         │\n      │            |            │      │                         │\n    0 │            └------------│   -1 │                         │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                y * h(x)                         y * h(x)\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.PerceptronLoss","page":"Losses","title":"LossFunctions.PerceptronLoss","text":"PerceptronLoss <: MarginLoss\n\nThe perceptron loss linearly penalizes every prediction where the resulting agreement <= 0. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(a) = max  0 -a \n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │\\.                       │    0 │            ┌------------│\n      │ '..                     │      │            |            │\n      │   \\.                    │      │            |            │\n      │     '.                  │      │            |            │\n    L │      '.                 │   L' │            |            │\n      │        \\.               │      │            |            │\n      │         '.              │      │            |            │\n    0 │           \\.____________│   -1 │------------┘            │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.LogitMarginLoss","page":"Losses","title":"LossFunctions.LogitMarginLoss","text":"LogitMarginLoss <: MarginLoss\n\nThe margin version of the logistic loss. It is infinitely many times differentiable, strictly convex, and Lipschitz continuous.\n\nL(a) = ln (1 + e^-a)\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │ \\.                      │    0 │                  ._--/\"\"│\n      │   \\.                    │      │               ../'      │\n      │     \\.                  │      │              ./         │\n      │       \\..               │      │            ./'          │\n    L │         '-_             │   L' │          .,'            │\n      │            '-_          │      │         ./              │\n      │               '\\-._     │      │      .,/'               │\n    0 │                    '\"\"*-│   -1 │__.--''                  │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -4                        4\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L1HingeLoss","page":"Losses","title":"LossFunctions.L1HingeLoss","text":"L1HingeLoss <: MarginLoss\n\nThe hinge loss linearly penalizes every predicition where the resulting agreement < 1 . It is Lipschitz continuous and convex, but not strictly convex.\n\nL(a) = max  0 1 - a \n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    3 │'\\.                      │    0 │                  ┌------│\n      │  ''_                    │      │                  |      │\n      │     \\.                  │      │                  |      │\n      │       '.                │      │                  |      │\n    L │         ''_             │   L' │                  |      │\n      │            \\.           │      │                  |      │\n      │              '.         │      │                  |      │\n    0 │                ''_______│   -1 │------------------┘      │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L2HingeLoss","page":"Losses","title":"LossFunctions.L2HingeLoss","text":"L2HingeLoss <: MarginLoss\n\nThe truncated least squares loss quadratically penalizes every predicition where the resulting agreement < 1. It is locally Lipschitz continuous and convex, but not strictly convex.\n\nL(a) = max  0 1 - a ^2\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    5 │     .                   │    0 │                 ,r------│\n      │     '.                  │      │               ,/        │\n      │      '\\                 │      │             ,/          │\n      │        \\                │      │           ,/            │\n    L │         '.              │   L' │         ./              │\n      │          '.             │      │       ./                │\n      │            \\.           │      │     ./                  │\n    0 │              '-.________│   -5 │   ./                    │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.SmoothedL1HingeLoss","page":"Losses","title":"LossFunctions.SmoothedL1HingeLoss","text":"SmoothedL1HingeLoss <: MarginLoss\n\nAs the name suggests a smoothed version of the L1 hinge loss. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(a) = begincases frac05gamma cdot max  0 1 - a  ^2  quad textif  a ge 1 - gamma  1 - fracgamma2 - a  quad textotherwise endcases\n\n\n\n              Lossfunction (γ=2)               Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │\\.                       │    0 │                 ,r------│\n      │ '.                      │      │               ./'       │\n      │   \\.                    │      │              ,/         │\n      │     '.                  │      │            ./'          │\n    L │      '.                 │   L' │           ,'            │\n      │        \\.               │      │         ,/              │\n      │          ',             │      │       ./'               │\n    0 │            '*-._________│   -1 │______./                 │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.ModifiedHuberLoss","page":"Losses","title":"LossFunctions.ModifiedHuberLoss","text":"ModifiedHuberLoss <: MarginLoss\n\nA special (4 times scaled) case of the SmoothedL1HingeLoss with γ=2. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(a) = begincases max  0 1 - a  ^2  quad textif  a ge -1  - 4 a  quad textotherwise endcases\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    5 │    '.                   │    0 │                .+-------│\n      │     '.                  │      │              ./'        │\n      │      '\\                 │      │             ,/          │\n      │        \\                │      │           ,/            │\n    L │         '.              │   L' │         ./              │\n      │          '.             │      │       ./'               │\n      │            \\.           │      │______/'                 │\n    0 │              '-.________│   -5 │                         │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.L2MarginLoss","page":"Losses","title":"LossFunctions.L2MarginLoss","text":"L2MarginLoss <: MarginLoss\n\nThe margin-based least-squares loss for classification, which penalizes every prediction where agreement != 1 quadratically. It is locally Lipschitz continuous and strongly convex.\n\nL(a) = left( 1 - a right)^2\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    5 │     .                   │    2 │                       ,r│\n      │     '.                  │      │                     ,/  │\n      │      '\\                 │      │                   ,/    │\n      │        \\                │      ├                 ,/      ┤\n    L │         '.              │   L' │               ./        │\n      │          '.             │      │             ./          │\n      │            \\.          .│      │           ./            │\n    0 │              '-.____.-' │   -3 │         ./              │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.ExpLoss","page":"Losses","title":"LossFunctions.ExpLoss","text":"ExpLoss <: MarginLoss\n\nThe margin-based exponential loss for classification, which penalizes every prediction exponentially. It is infinitely many times differentiable, locally Lipschitz continuous and strictly convex, but not clipable.\n\nL(a) = e^-a\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    5 │  \\.                     │    0 │               _,,---:'\"\"│\n      │   l                     │      │           _r/\"'         │\n      │    l.                   │      │        .r/'             │\n      │     \":                  │      │      .r'                │\n    L │       \\.                │   L' │     ./                  │\n      │        \"\\..             │      │    .'                   │\n      │           '\":,_         │      │   ,'                    │\n    0 │                \"\"---:.__│   -5 │  ./                     │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.SigmoidLoss","page":"Losses","title":"LossFunctions.SigmoidLoss","text":"SigmoidLoss <: MarginLoss\n\nContinuous loss which penalizes every prediction with a loss within in the range (0,2). It is infinitely many times differentiable, Lipschitz continuous but nonconvex.\n\nL(a) = 1 - tanh(a)\n\n\n\n              Lossfunction                     Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │\"\"'--,.                  │    0 │..                     ..│\n      │      '\\.                │      │ \"\\.                 ./\" │\n      │         '.              │      │    ',             ,'    │\n      │           \\.            │      │      \\           /      │\n    L │            \"\\.          │   L' │       \\         /       │\n      │              \\.         │      │        \\.     ./        │\n      │                \\,       │      │         \\.   ./         │\n    0 │                  '\"-:.__│   -1 │          ',_,'          │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"losses/#LossFunctions.DWDMarginLoss","page":"Losses","title":"LossFunctions.DWDMarginLoss","text":"DWDMarginLoss <: MarginLoss\n\nThe distance weighted discrimination margin loss. It is a differentiable generalization of the L1HingeLoss that is different than the SmoothedL1HingeLoss. It is Lipschitz continuous and convex, but not strictly convex.\n\nL(a) = begincases 1 - a  quad textif  a ge fracqq+1  frac1a^q fracq^q(q+1)^q+1  quad textotherwise endcases\n\n\n\n              Lossfunction (q=1)               Derivative\n      ┌────────────┬────────────┐      ┌────────────┬────────────┐\n    2 │      \".                 │    0 │                     ._r-│\n      │        \\.               │      │                   ./    │\n      │         ',              │      │                 ./      │\n      │           \\.            │      │                 /       │\n    L │            \"\\.          │   L' │                .        │\n      │              \\.         │      │                /        │\n      │               \":__      │      │               ;         │\n    0 │                   '\"\"---│   -1 │---------------┘         │\n      └────────────┴────────────┘      └────────────┴────────────┘\n      -2                        2      -2                        2\n                 y ⋅ ŷ                            y ⋅ ŷ\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"<script type=\"module\">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true });\n</script>","category":"page"},{"location":"","page":"Home","title":"Home","text":"SymbolicRegression.jl searches for symbolic expressions which optimize a particular objective.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div align=\"center\">\n<video width=\"800\" height=\"600\" controls>\n<source src=\"https://github.com/MilesCranmer/SymbolicRegression.jl/assets/7593028/f5b68f1f-9830-497f-a197-6ae332c94ee0\" type=\"video/mp4\">\n</video>\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Latest release Documentation Forums Paper\n(Image: version) (Image: Dev) (Image: Discussions) (Image: Paper)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Build status Coverage\n(Image: CI) (Image: Coverage Status)<br>(Image: Aqua QA)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out PySR for a Python frontend. Cite this software","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– prettier-ignore-end >","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contents:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributors\nQuickstart\nMLJ Interface\nLow-Level Interface\n→ Documentation","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors ✨","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We are eager to welcome new contributors! If you have an idea for a new feature, don't hesitate to share it on the issues page or forums.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://www.linkedin.com/in/markkittisopikul/\"><img src=\"https://avatars.githubusercontent.com/u/8062771?v=4?s=50\" width=\"50px;\" alt=\"Mark Kittisopikul\"/><br /><sub><b>Mark Kittisopikul</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=mkitti\" title=\"Code\">💻</a> <a href=\"#ideas-mkitti\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-mkitti\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#platform-mkitti\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"#promotion-mkitti\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Amkitti\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-mkitti\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=mkitti\" title=\"Tests\">⚠️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/tttc3\"><img src=\"https://avatars.githubusercontent.com/u/97948946?v=4?s=50\" width=\"50px;\" alt=\"T Coxon\"/><br /><sub><b>T Coxon</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Atttc3\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=tttc3\" title=\"Code\">💻</a> <a href=\"#plugin-tttc3\" title=\"Plugin/utility libraries\">🔌</a> <a href=\"#ideas-tttc3\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-tttc3\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-tttc3\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Atttc3\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-tttc3\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=tttc3\" title=\"Tests\">⚠️</a> <a href=\"#userTesting-tttc3\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/DhananjayAshok\"><img src=\"https://avatars.githubusercontent.com/u/46792537?v=4?s=50\" width=\"50px;\" alt=\"Dhananjay Ashok\"/><br /><sub><b>Dhananjay Ashok</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=DhananjayAshok\" title=\"Code\">💻</a> <a href=\"#example-DhananjayAshok\" title=\"Examples.\">🌍</a> <a href=\"#ideas-DhananjayAshok\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#maintenance-DhananjayAshok\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=DhananjayAshok\" title=\"Tests\">⚠️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://gitlab.com/johanbluecreek\"><img src=\"https://avatars.githubusercontent.com/u/852554?v=4?s=50\" width=\"50px;\" alt=\"Johan Blåbäck\"/><br /><sub><b>Johan Blåbäck</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Ajohanbluecreek\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johanbluecreek\" title=\"Code\">💻</a> <a href=\"#ideas-johanbluecreek\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#maintenance-johanbluecreek\" title=\"Maintenance\">🚧</a> <a href=\"#promotion-johanbluecreek\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Ajohanbluecreek\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johanbluecreek\" title=\"Tests\">⚠️</a> <a href=\"#userTesting-johanbluecreek\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://mathopt.de/people/martensen/index.php\"><img src=\"https://avatars.githubusercontent.com/u/20998300?v=4?s=50\" width=\"50px;\" alt=\"JuliusMartensen\"/><br /><sub><b>JuliusMartensen</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AAlCap23\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=AlCap23\" title=\"Code\">💻</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=AlCap23\" title=\"Documentation\">📖</a> <a href=\"#plugin-AlCap23\" title=\"Plugin/utility libraries\">🔌</a> <a href=\"#ideas-AlCap23\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-AlCap23\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-AlCap23\" title=\"Maintenance\">🚧</a> <a href=\"#platform-AlCap23\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"#promotion-AlCap23\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AAlCap23\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-AlCap23\" title=\"Tools\">🔧</a> <a href=\"#userTesting-AlCap23\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/ngam\"><img src=\"https://avatars.githubusercontent.com/u/67342040?v=4?s=50\" width=\"50px;\" alt=\"ngam\"/><br /><sub><b>ngam</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ngam\" title=\"Code\">💻</a> <a href=\"#infra-ngam\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#platform-ngam\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Angam\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-ngam\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ngam\" title=\"Tests\">⚠️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/kazewong\"><img src=\"https://avatars.githubusercontent.com/u/8803931?v=4?s=50\" width=\"50px;\" alt=\"Kaze Wong\"/><br /><sub><b>Kaze Wong</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Akazewong\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=kazewong\" title=\"Code\">💻</a> <a href=\"#ideas-kazewong\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-kazewong\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-kazewong\" title=\"Maintenance\">🚧</a> <a href=\"#promotion-kazewong\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Akazewong\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#research-kazewong\" title=\"Research\">🔬</a> <a href=\"#userTesting-kazewong\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/ChrisRackauckas\"><img src=\"https://avatars.githubusercontent.com/u/1814174?v=4?s=50\" width=\"50px;\" alt=\"Christopher Rackauckas\"/><br /><sub><b>Christopher Rackauckas</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AChrisRackauckas\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ChrisRackauckas\" title=\"Code\">💻</a> <a href=\"#plugin-ChrisRackauckas\" title=\"Plugin/utility libraries\">🔌</a> <a href=\"#ideas-ChrisRackauckas\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-ChrisRackauckas\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#promotion-ChrisRackauckas\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AChrisRackauckas\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#research-ChrisRackauckas\" title=\"Research\">🔬</a> <a href=\"#tool-ChrisRackauckas\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=ChrisRackauckas\" title=\"Tests\">⚠️</a> <a href=\"#userTesting-ChrisRackauckas\" title=\"User Testing\">📓</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://kidger.site/\"><img src=\"https://avatars.githubusercontent.com/u/33688385?v=4?s=50\" width=\"50px;\" alt=\"Patrick Kidger\"/><br /><sub><b>Patrick Kidger</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Apatrick-kidger\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=patrick-kidger\" title=\"Code\">💻</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=patrick-kidger\" title=\"Documentation\">📖</a> <a href=\"#plugin-patrick-kidger\" title=\"Plugin/utility libraries\">🔌</a> <a href=\"#ideas-patrick-kidger\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#maintenance-patrick-kidger\" title=\"Maintenance\">🚧</a> <a href=\"#promotion-patrick-kidger\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Apatrick-kidger\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#research-patrick-kidger\" title=\"Research\">🔬</a> <a href=\"#tool-patrick-kidger\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=patrick-kidger\" title=\"Tests\">⚠️</a> <a href=\"#userTesting-patrick-kidger\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/OkonSamuel\"><img src=\"https://avatars.githubusercontent.com/u/39421418?v=4?s=50\" width=\"50px;\" alt=\"Okon Samuel\"/><br /><sub><b>Okon Samuel</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AOkonSamuel\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=OkonSamuel\" title=\"Code\">💻</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=OkonSamuel\" title=\"Documentation\">📖</a> <a href=\"#maintenance-OkonSamuel\" title=\"Maintenance\">🚧</a> <a href=\"#ideas-OkonSamuel\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-OkonSamuel\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AOkonSamuel\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=OkonSamuel\" title=\"Tests\">⚠️</a> <a href=\"#userTesting-OkonSamuel\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/w2ll2am\"><img src=\"https://avatars.githubusercontent.com/u/16038228?v=4?s=50\" width=\"50px;\" alt=\"William Booth-Clibborn\"/><br /><sub><b>William Booth-Clibborn</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=w2ll2am\" title=\"Code\">💻</a> <a href=\"#example-w2ll2am\" title=\"Examples.\">🌍</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=w2ll2am\" title=\"Documentation\">📖</a> <a href=\"#userTesting-w2ll2am\" title=\"User Testing\">📓</a> <a href=\"#maintenance-w2ll2am\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Aw2ll2am\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-w2ll2am\" title=\"Tools\">🔧</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=w2ll2am\" title=\"Tests\">⚠️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://pablo-lemos.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/38078898?v=4?s=50\" width=\"50px;\" alt=\"Pablo Lemos\"/><br /><sub><b>Pablo Lemos</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3APablo-Lemos\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-Pablo-Lemos\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-Pablo-Lemos\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3APablo-Lemos\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#research-Pablo-Lemos\" title=\"Research\">🔬</a> <a href=\"#userTesting-Pablo-Lemos\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/Moelf\"><img src=\"https://avatars.githubusercontent.com/u/5306213?v=4?s=50\" width=\"50px;\" alt=\"Jerry Ling\"/><br /><sub><b>Jerry Ling</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AMoelf\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=Moelf\" title=\"Code\">💻</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=Moelf\" title=\"Documentation\">📖</a> <a href=\"#example-Moelf\" title=\"Examples.\">🌍</a> <a href=\"#ideas-Moelf\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-Moelf\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AMoelf\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#userTesting-Moelf\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/CharFox1\"><img src=\"https://avatars.githubusercontent.com/u/35052672?v=4?s=50\" width=\"50px;\" alt=\"Charles Fox\"/><br /><sub><b>Charles Fox</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3ACharFox1\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=CharFox1\" title=\"Code\">💻</a> <a href=\"#ideas-CharFox1\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#maintenance-CharFox1\" title=\"Maintenance\">🚧</a> <a href=\"#promotion-CharFox1\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3ACharFox1\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#research-CharFox1\" title=\"Research\">🔬</a> <a href=\"#userTesting-CharFox1\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/johannbrehmer\"><img src=\"https://avatars.githubusercontent.com/u/17068560?v=4?s=50\" width=\"50px;\" alt=\"Johann Brehmer\"/><br /><sub><b>Johann Brehmer</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johannbrehmer\" title=\"Code\">💻</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johannbrehmer\" title=\"Documentation\">📖</a> <a href=\"#ideas-johannbrehmer\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-johannbrehmer\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Ajohannbrehmer\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#research-johannbrehmer\" title=\"Research\">🔬</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=johannbrehmer\" title=\"Tests\">⚠️</a> <a href=\"#userTesting-johannbrehmer\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"http://www.cosmicmar.com/\"><img src=\"https://avatars.githubusercontent.com/u/1510968?v=4?s=50\" width=\"50px;\" alt=\"Marius Millea\"/><br /><sub><b>Marius Millea</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=marius311\" title=\"Code\">💻</a> <a href=\"#ideas-marius311\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-marius311\" title=\"Promotion\">📣</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Amarius311\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#userTesting-marius311\" title=\"User Testing\">📓</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://gitlab.com/cobac\"><img src=\"https://avatars.githubusercontent.com/u/27872944?v=4?s=50\" width=\"50px;\" alt=\"Coba\"/><br /><sub><b>Coba</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Acobac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=cobac\" title=\"Code\">💻</a> <a href=\"#ideas-cobac\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Acobac\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#userTesting-cobac\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/pitmonticone\"><img src=\"https://avatars.githubusercontent.com/u/38562595?v=4?s=50\" width=\"50px;\" alt=\"Pietro Monticone\"/><br /><sub><b>Pietro Monticone</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Apitmonticone\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=pitmonticone\" title=\"Documentation\">📖</a> <a href=\"#ideas-pitmonticone\" title=\"Ideas, planning, and feedback.\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/sheevy\"><img src=\"https://avatars.githubusercontent.com/u/1525683?v=4?s=50\" width=\"50px;\" alt=\"Mateusz Kubica\"/><br /><sub><b>Mateusz Kubica</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=sheevy\" title=\"Documentation\">📖</a> <a href=\"#ideas-sheevy\" title=\"Ideas, planning, and feedback.\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://jaywadekar.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/5493388?v=4?s=50\" width=\"50px;\" alt=\"Jay Wadekar\"/><br /><sub><b>Jay Wadekar</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AJayWadekar\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-JayWadekar\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-JayWadekar\" title=\"Promotion\">📣</a> <a href=\"#research-JayWadekar\" title=\"Research\">🔬</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/ablaom\"><img src=\"https://avatars.githubusercontent.com/u/30517088?v=4?s=50\" width=\"50px;\" alt=\"Anthony Blaom, PhD\"/><br /><sub><b>Anthony Blaom, PhD</b></sub></a><br /><a href=\"#infra-ablaom\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#ideas-ablaom\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Aablaom\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/Jgmedina95\"><img src=\"https://avatars.githubusercontent.com/u/97254349?v=4?s=50\" width=\"50px;\" alt=\"Jgmedina95\"/><br /><sub><b>Jgmedina95</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3AJgmedina95\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-Jgmedina95\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3AJgmedina95\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/mcabbott\"><img src=\"https://avatars.githubusercontent.com/u/32575566?v=4?s=50\" width=\"50px;\" alt=\"Michael Abbott\"/><br /><sub><b>Michael Abbott</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=mcabbott\" title=\"Code\">💻</a> <a href=\"#ideas-mcabbott\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Amcabbott\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tool-mcabbott\" title=\"Tools\">🔧</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/oscardssmith\"><img src=\"https://avatars.githubusercontent.com/u/11729272?v=4?s=50\" width=\"50px;\" alt=\"Oscar Smith\"/><br /><sub><b>Oscar Smith</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=oscardssmith\" title=\"Code\">💻</a> <a href=\"#ideas-oscardssmith\" title=\"Ideas, planning, and feedback.\">💡</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://ericphanson.com/\"><img src=\"https://avatars.githubusercontent.com/u/5846501?v=4?s=50\" width=\"50px;\" alt=\"Eric Hanson\"/><br /><sub><b>Eric Hanson</b></sub></a><br /><a href=\"#ideas-ericphanson\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-ericphanson\" title=\"Promotion\">📣</a> <a href=\"#userTesting-ericphanson\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/henriquebecker91\"><img src=\"https://avatars.githubusercontent.com/u/14113435?v=4?s=50\" width=\"50px;\" alt=\"Henrique Becker\"/><br /><sub><b>Henrique Becker</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=henriquebecker91\" title=\"Code\">💻</a> <a href=\"#ideas-henriquebecker91\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/pulls?q=is%3Apr+reviewed-by%3Ahenriquebecker91\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/qwertyjl\"><img src=\"https://avatars.githubusercontent.com/u/110912592?v=4?s=50\" width=\"50px;\" alt=\"qwertyjl\"/><br /><sub><b>qwertyjl</b></sub></a><br /><a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/issues?q=author%3Aqwertyjl\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/MilesCranmer/SymbolicRegression.jl/commits?author=qwertyjl\" title=\"Documentation\">📖</a> <a href=\"#ideas-qwertyjl\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#userTesting-qwertyjl\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://huijzer.xyz/\"><img src=\"https://avatars.githubusercontent.com/u/20724914?v=4?s=50\" width=\"50px;\" alt=\"Rik Huijzer\"/><br /><sub><b>Rik Huijzer</b></sub></a><br /><a href=\"#ideas-rikhuijzer\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#infra-rikhuijzer\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://github.com/GCaptainNemo\"><img src=\"https://avatars.githubusercontent.com/u/43086239?v=4?s=50\" width=\"50px;\" alt=\"Hongyu Wang\"/><br /><sub><b>Hongyu Wang</b></sub></a><br /><a href=\"#ideas-GCaptainNemo\" title=\"Ideas, planning, and feedback.\">💡</a> <a href=\"#promotion-GCaptainNemo\" title=\"Promotion\">📣</a> <a href=\"#research-GCaptainNemo\" title=\"Research\">🔬</a></td>\n      <td align=\"center\" valign=\"top\" width=\"12.5%\"><a href=\"https://sauravmaheshkar.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/61241031?v=4?s=50\" width=\"50px;\" alt=\"Saurav Maheshkar\"/><br /><sub><b>Saurav Maheshkar</b></sub></a><br /><a href=\"#tool-SauravMaheshkar\" title=\"Tools\">🔧</a></td>\n    </tr>\n  </tbody>\n</table>","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install in Julia with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"SymbolicRegression\")","category":"page"},{"location":"#MLJ-Interface","page":"Home","title":"MLJ Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The easiest way to use SymbolicRegression.jl is with MLJ. Let's see an example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: SRRegressor\nimport MLJ: machine, fit!, predict, report\n\n# Dataset with two named features:\nX = (a = rand(500), b = rand(500))\n\n# and one target:\ny = @. 2 * cos(X.a * 23.5) - X.b ^ 2\n\n# with some noise:\ny = y .+ randn(500) .* 1e-3\n\nmodel = SRRegressor(\n    niterations=50,\n    binary_operators=[+, -, *],\n    unary_operators=[cos],\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, let's create and train this model on our data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\n\nfit!(mach)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You will notice that expressions are printed using the column names of our table. If, instead of a table-like object, a simple array is passed (e.g., X=randn(100, 2)), x1, ..., xn will be used for variable names.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's look at the expressions discovered:","category":"page"},{"location":"","page":"Home","title":"Home","text":"report(mach)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, we can make predictions with the expressions on new data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(mach, X)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will make predictions using the expression selected by model.selection_method, which by default is a mix of accuracy and complexity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can override this selection and select an equation from the Pareto front manually with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(mach, (data=X, idx=2))","category":"page"},{"location":"","page":"Home","title":"Home","text":"where here we choose to evaluate the second equation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For fitting multiple outputs, one can use MultitargetSRRegressor (and pass an array of indices to idx in predict for selecting specific equations). For a full list of options available to each regressor, see the API page.","category":"page"},{"location":"#Low-Level-Interface","page":"Home","title":"Low-Level Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The heart of SymbolicRegression.jl is the equation_search function. This takes a 2D array and attempts to model a 1D array using analytic functional forms. Note: unlike the MLJ interface, this assumes column-major input of shape [features, rows].","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: Options, equation_search\n\nX = randn(2, 100)\ny = 2 * cos.(X[2, :]) + X[1, :] .^ 2 .- 2\n\noptions = Options(\n    binary_operators=[+, *, /, -],\n    unary_operators=[cos, exp],\n    populations=20\n)\n\nhall_of_fame = equation_search(\n    X, y, niterations=40, options=options,\n    parallelism=:multithreading\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can view the resultant equations in the dominating Pareto front (best expression seen at each complexity) with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: calculate_pareto_frontier\n\ndominating = calculate_pareto_frontier(hall_of_fame)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is a vector of PopMember type - which contains the expression along with the score. We can get the expressions with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"trees = [member.tree for member in dominating]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each of these equations is a Node{T} type for some constant type T (like Float32).","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can evaluate a given tree with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: eval_tree_array\n\ntree = trees[end]\noutput, did_succeed = eval_tree_array(tree, X, options)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The output array will contain the result of the tree at each of the 100 rows. This did_succeed flag detects whether an evaluation was successful, or whether encountered any NaNs or Infs during calculation (such as, e.g., sqrt(-1)).","category":"page"},{"location":"#Constructing-expressions","page":"Home","title":"Constructing expressions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Expressions are represented as the Node type which is developed in the DynamicExpressions.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can manipulate and construct expressions directly. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: Options, Node, eval_tree_array\n\noptions = Options(;\n    binary_operators=[+, -, *, ^, /], unary_operators=[cos, exp, sin]\n)\nx1, x2, x3 = [Node(; feature=i) for i=1:3]\ntree = cos(x1 - 3.2 * x2) - x1^3.2","category":"page"},{"location":"","page":"Home","title":"Home","text":"This tree has Float64 constants, so the type of the entire tree will be promoted to Node{Float64}.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can convert all constants (recursively) to Float32:","category":"page"},{"location":"","page":"Home","title":"Home","text":"float32_tree = convert(Node{Float32}, tree)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can then evaluate this tree on a dataset:","category":"page"},{"location":"","page":"Home","title":"Home","text":"X = rand(Float32, 3, 100)\noutput, did_succeed = eval_tree_array(tree, X, options)","category":"page"},{"location":"#Exporting-to-SymbolicUtils.jl","page":"Home","title":"Exporting to SymbolicUtils.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We can view the equations in the dominating Pareto frontier with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dominating = calculate_pareto_frontier(hall_of_fame)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can convert the best equation to SymbolicUtils.jl with the following function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: node_to_symbolic\n\neqn = node_to_symbolic(dominating[end].tree, options)\nprintln(simplify(eqn*5 + 3))","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also print out the full pareto frontier like so:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import SymbolicRegression: compute_complexity, string_tree\n\nprintln(\"Complexity\\tMSE\\tEquation\")\n\nfor member in dominating\n    complexity = compute_complexity(member, options)\n    loss = member.loss\n    string = string_tree(member.tree, options)\n\n    println(\"$(complexity)\\t$(loss)\\t$(string)\")\nend","category":"page"},{"location":"#Code-structure","page":"Home","title":"Code structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SymbolicRegression.jl is organized roughly as follows. Rounded rectangles indicate objects, and rectangles indicate functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(if you can't see this diagram being rendered, try pasting it into mermaid-js.github.io/mermaid-live-editor)","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"mermaid\">\n\nflowchart TB\n    op([Options])\n    d([Dataset])\n    op --> ES\n    d --> ES\n    subgraph ES[equation_search]\n        direction TB\n        IP[sr_spawner]\n        IP --> p1\n        IP --> p2\n        subgraph p1[Thread 1]\n            direction LR\n            pop1([Population])\n            pop1 --> src[s_r_cycle]\n            src --> opt[optimize_and_simplify_population]\n            opt --> pop1\n        end\n        subgraph p2[Thread 2]\n            direction LR\n            pop2([Population])\n            pop2 --> src2[s_r_cycle]\n            src2 --> opt2[optimize_and_simplify_population]\n            opt2 --> pop2\n        end\n        pop1 --> hof\n        pop2 --> hof\n        hof([HallOfFame])\n        hof --> migration\n        pop1 <-.-> migration\n        pop2 <-.-> migration\n        migration[migrate!]\n    end\n    ES --> output([HallOfFame])\n\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The HallOfFame objects store the expressions with the lowest loss seen at each complexity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The dependency structure of the code itself is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div class=\"mermaid\">\n\nstateDiagram-v2\n    AdaptiveParsimony --> Mutate\n    AdaptiveParsimony --> Population\n    AdaptiveParsimony --> RegularizedEvolution\n    AdaptiveParsimony --> SingleIteration\n    AdaptiveParsimony --> SymbolicRegression\n    CheckConstraints --> Mutate\n    CheckConstraints --> SymbolicRegression\n    Complexity --> CheckConstraints\n    Complexity --> HallOfFame\n    Complexity --> LossFunctions\n    Complexity --> Mutate\n    Complexity --> Population\n    Complexity --> SearchUtils\n    Complexity --> SingleIteration\n    Complexity --> SymbolicRegression\n    ConstantOptimization --> Mutate\n    ConstantOptimization --> SingleIteration\n    Core --> AdaptiveParsimony\n    Core --> CheckConstraints\n    Core --> Complexity\n    Core --> ConstantOptimization\n    Core --> HallOfFame\n    Core --> InterfaceDynamicExpressions\n    Core --> LossFunctions\n    Core --> Migration\n    Core --> Mutate\n    Core --> MutationFunctions\n    Core --> PopMember\n    Core --> Population\n    Core --> Recorder\n    Core --> RegularizedEvolution\n    Core --> SearchUtils\n    Core --> SingleIteration\n    Core --> SymbolicRegression\n    Dataset --> Core\n    HallOfFame --> SearchUtils\n    HallOfFame --> SingleIteration\n    HallOfFame --> SymbolicRegression\n    InterfaceDynamicExpressions --> LossFunctions\n    InterfaceDynamicExpressions --> SymbolicRegression\n    LossFunctions --> ConstantOptimization\n    LossFunctions --> HallOfFame\n    LossFunctions --> Mutate\n    LossFunctions --> PopMember\n    LossFunctions --> Population\n    LossFunctions --> SymbolicRegression\n    Migration --> SymbolicRegression\n    Mutate --> RegularizedEvolution\n    MutationFunctions --> Mutate\n    MutationFunctions --> Population\n    MutationFunctions --> SymbolicRegression\n    Operators --> Core\n    Operators --> Options\n    Options --> Core\n    OptionsStruct --> Core\n    OptionsStruct --> Options\n    PopMember --> ConstantOptimization\n    PopMember --> HallOfFame\n    PopMember --> Migration\n    PopMember --> Mutate\n    PopMember --> Population\n    PopMember --> RegularizedEvolution\n    PopMember --> SingleIteration\n    PopMember --> SymbolicRegression\n    Population --> Migration\n    Population --> RegularizedEvolution\n    Population --> SearchUtils\n    Population --> SingleIteration\n    Population --> SymbolicRegression\n    ProgramConstants --> Core\n    ProgramConstants --> Dataset\n    ProgressBars --> SearchUtils\n    ProgressBars --> SymbolicRegression\n    Recorder --> Mutate\n    Recorder --> RegularizedEvolution\n    Recorder --> SingleIteration\n    Recorder --> SymbolicRegression\n    RegularizedEvolution --> SingleIteration\n    SearchUtils --> SymbolicRegression\n    SingleIteration --> SymbolicRegression\n    Utils --> CheckConstraints\n    Utils --> ConstantOptimization\n    Utils --> Options\n    Utils --> PopMember\n    Utils --> SingleIteration\n    Utils --> SymbolicRegression\n\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bash command to generate dependency structure from src directory (requires vim-stream):","category":"page"},{"location":"","page":"Home","title":"Home","text":"echo 'stateDiagram-v2'\nIFS=$'\\n'\nfor f in *.jl; do\n    for line in $(cat $f | grep -e 'import \\.\\.' -e 'import \\.'); do\n        echo $(echo $line | vims -s 'dwf:d$' -t '%s/^\\.*//g' '%s/Module//g') $(basename \"$f\" .jl);\n    done;\ndone | vims -l 'f a--> ' | sort","category":"page"},{"location":"#Search-options","page":"Home","title":"Search options","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See https://astroautomata.com/SymbolicRegression.jl/stable/api/#Options","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples.md\", \"api.md\", \"types.md\", \"losses.md\"]","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/#Equations","page":"Types","title":"Equations","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Equations are specified as binary trees with the Node type, defined as follows:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Node{T<:DATA_TYPE}","category":"page"},{"location":"types/#DynamicExpressions.EquationModule.Node","page":"Types","title":"DynamicExpressions.EquationModule.Node","text":"Node{T} <: AbstractExpressionNode{T}\n\nNode defines a symbolic expression stored in a binary tree. A single Node instance is one \"node\" of this tree, and has references to its children. By tracing through the children nodes, you can evaluate or print a given expression.\n\nFields\n\ndegree::UInt8: Degree of the node. 0 for constants, 1 for   unary operators, 2 for binary operators.\nconstant::Bool: Whether the node is a constant.\nval::T: Value of the node. If degree==0, and constant==true,   this is the value of the constant. It has a type specified by the   overall type of the Node (e.g., Float64).\nfeature::UInt16: Index of the feature to use in the   case of a feature node. Only used if degree==0 and constant==false.    Only defined if degree == 0 && constant == false.\nop::UInt8: If degree==1, this is the index of the operator   in operators.unaops. If degree==2, this is the index of the   operator in operators.binops. In other words, this is an enum   of the operators, and is dependent on the specific OperatorEnum   object. Only defined if degree >= 1\nl::Node{T}: Left child of the node. Only defined if degree >= 1.   Same type as the parent node.\nr::Node{T}: Right child of the node. Only defined if degree == 2.   Same type as the parent node. This is to be passed as the right   argument to the binary operator.\n\nConstructors\n\nNode([T]; val=nothing, feature=nothing, op=nothing, l=nothing, r=nothing, children=nothing, allocator=default_allocator)\nNode{T}(; val=nothing, feature=nothing, op=nothing, l=nothing, r=nothing, children=nothing, allocator=default_allocator)\n\nCreate a new node in an expression tree. If T is not specified in either the type or the first argument, it will be inferred from the value of val passed or l and/or r. If it cannot be inferred from these, it will default to Float32.\n\nThe children keyword can be used instead of l and r and should be a tuple of children. This is to permit the use of splatting in constructors.\n\nYou may also construct nodes via the convenience operators generated by creating an OperatorEnum.\n\nYou may also choose to specify a default memory allocator for the node other than simply Node{T}() in the allocator keyword argument.\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"There are a variety of constructors for Node objects, including:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Node(; val::DATA_TYPE=nothing, feature::Integer=nothing)\nNode(op::Int, l::Node)\nNode(op::Int, l::Node, r::Node)\nNode(var_string::String)","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"When you create an Options object, the operators passed are also re-defined for Node types. This allows you use, e.g., t=Node(; feature=1) * 3f0 to create a tree, so long as * was specified as a binary operator. This works automatically for operators defined in Base, although you can also get this to work for user-defined operators by using @extend_operators:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"@extend_operators options","category":"page"},{"location":"types/#SymbolicRegression.InterfaceDynamicExpressionsModule.@extend_operators-Tuple{Any}","page":"Types","title":"SymbolicRegression.InterfaceDynamicExpressionsModule.@extend_operators","text":"@extend_operators options\n\nExtends all operators defined in this options object to work on the AbstractExpressionNode type. While by default this is already done for operators defined in Base when you create an options and pass define_helper_functions=true, this does not apply to the user-defined operators. Thus, to do so, you must apply this macro to the operator enum in the same module you have the operators defined.\n\n\n\n\n\n","category":"macro"},{"location":"types/","page":"Types","title":"Types","text":"When using these node constructors, types will automatically be promoted. You can convert the type of a node using convert:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"convert(::Type{Node{T1}}, tree::Node{T2}) where {T1, T2}","category":"page"},{"location":"types/#Base.convert-Union{Tuple{T2}, Tuple{T1}, Tuple{Type{Node{T1}}, Node{T2}}} where {T1, T2}","page":"Types","title":"Base.convert","text":"convert(::Type{<:AbstractExpressionNode{T1}}, n::AbstractExpressionNode{T2}) where {T1,T2}\n\nConvert a AbstractExpressionNode{T2} to a AbstractExpressionNode{T1}. This will recursively convert all children nodes to AbstractExpressionNode{T1}, using convert(T1, tree.val) at constant nodes.\n\nArguments\n\n::Type{AbstractExpressionNode{T1}}: Type to convert to.\ntree::AbstractExpressionNode{T2}: AbstractExpressionNode to convert.\n\n\n\n\n\n","category":"method"},{"location":"types/","page":"Types","title":"Types","text":"You can set a tree (in-place) with set_node!:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"set_node!(tree::Node{T}, new_tree::Node{T}) where {T}","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"You can create a copy of a node with copy_node:","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"copy_node(tree::Node)","category":"page"},{"location":"types/#DynamicExpressions.EquationModule.copy_node-Tuple{Node}","page":"Types","title":"DynamicExpressions.EquationModule.copy_node","text":"copy_node(tree::AbstractExpressionNode; break_sharing::Val=Val(false))\n\nCopy a node, recursively copying all children nodes. This is more efficient than the built-in copy.\n\nIf break_sharing is set to Val(true), sharing in a tree will be ignored.\n\n\n\n\n\n","category":"method"},{"location":"types/#Population","page":"Types","title":"Population","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Groups of equations are given as a population, which is an array of trees tagged with score, loss, and birthdate–-these values are given in the PopMember.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Population","category":"page"},{"location":"types/#SymbolicRegression.PopulationModule.Population","page":"Types","title":"SymbolicRegression.PopulationModule.Population","text":"Population(pop::Array{PopMember{T,L}, 1})\n\nCreate population from list of PopMembers.\n\n\n\n\n\nPopulation(dataset::Dataset{T,L};\n           population_size, nlength::Int=3, options::Options,\n           nfeatures::Int)\n\nCreate random population and score them on the dataset.\n\n\n\n\n\nPopulation(X::AbstractMatrix{T}, y::AbstractVector{T};\n           population_size, nlength::Int=3,\n           options::Options, nfeatures::Int,\n           loss_type::Type=Nothing)\n\nCreate random population and score them on the dataset.\n\n\n\n\n\n","category":"type"},{"location":"types/#Population-members","page":"Types","title":"Population members","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"PopMember","category":"page"},{"location":"types/#SymbolicRegression.PopMemberModule.PopMember","page":"Types","title":"SymbolicRegression.PopMemberModule.PopMember","text":"PopMember(t::AbstractExpressionNode{T}, score::L, loss::L)\n\nCreate a population member with a birth date at the current time. The type of the Node may be different from the type of the score and loss.\n\nArguments\n\nt::AbstractExpressionNode{T}: The tree for the population member.\nscore::L: The score (normalized to a baseline, and offset by a complexity penalty)\nloss::L: The raw loss to assign.\n\n\n\n\n\nPopMember(dataset::Dataset{T,L},\n          t::AbstractExpressionNode{T}, options::Options)\n\nCreate a population member with a birth date at the current time. Automatically compute the score for this tree.\n\nArguments\n\ndataset::Dataset{T,L}: The dataset to evaluate the tree on.\nt::AbstractExpressionNode{T}: The tree for the population member.\noptions::Options: What options to use.\n\n\n\n\n\n","category":"type"},{"location":"types/#Hall-of-Fame","page":"Types","title":"Hall of Fame","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"HallOfFame\nHallOfFame(options::Options, ::Type{T}, ::Type{L}) where {T<:DATA_TYPE,L<:LOSS_TYPE}","category":"page"},{"location":"types/#SymbolicRegression.HallOfFameModule.HallOfFame","page":"Types","title":"SymbolicRegression.HallOfFameModule.HallOfFame","text":"HallOfFame{T<:DATA_TYPE,L<:LOSS_TYPE}\n\nList of the best members seen all time in .members, with .members[c] being the best member seen at complexity c. Including only the members which actually have been set, you can run .members[exists].\n\nFields\n\nmembers::Array{PopMember{T,L},1}: List of the best members seen all time.   These are ordered by complexity, with .members[1] the member with complexity 1.\nexists::Array{Bool,1}: Whether the member at the given complexity has been set.\n\n\n\n\n\n","category":"type"},{"location":"types/#SymbolicRegression.HallOfFameModule.HallOfFame-Union{Tuple{L}, Tuple{T}, Tuple{Options, Type{T}, Type{L}}} where {T<:Number, L<:Real}","page":"Types","title":"SymbolicRegression.HallOfFameModule.HallOfFame","text":"HallOfFame(options::Options, ::Type{T}, ::Type{L}) where {T<:DATA_TYPE,L<:LOSS_TYPE,N<:AbstractExpressionNode}\n\nCreate empty HallOfFame. The HallOfFame stores a list of PopMember objects in .members, which is enumerated by size (i.e., .members[1] is the constant solution). .exists is used to determine whether the particular member has been instantiated or not.\n\nArguments:\n\noptions: Options containing specification about deterministic.\nT: Type of Nodes to use in the population. e.g., Float64.\nL: Type of loss to use in the population. e.g., Float64.\n\n\n\n\n\n","category":"method"},{"location":"types/#Dataset","page":"Types","title":"Dataset","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Dataset\nDataset(X::AbstractMatrix{T}, y::Union{AbstractVector{T},Nothing}=nothing;\n        weights::Union{AbstractVector{T}, Nothing}=nothing,\n        variable_names::Union{Array{String, 1}, Nothing}=nothing,\n        y_variable_name::Union{String,Nothing}=nothing,\n        extra::NamedTuple=NamedTuple(),\n        loss_type::Type=Nothing,\n        X_units::Union{AbstractVector, Nothing}=nothing,\n        y_units=nothing,\n) where {T<:DATA_TYPE}\nupdate_baseline_loss!","category":"page"},{"location":"types/#SymbolicRegression.CoreModule.DatasetModule.Dataset","page":"Types","title":"SymbolicRegression.CoreModule.DatasetModule.Dataset","text":"Dataset{T<:DATA_TYPE,L<:LOSS_TYPE}\n\nFields\n\nX::AbstractMatrix{T}: The input features, with shape (nfeatures, n).\ny::AbstractVector{T}: The desired output values, with shape (n,).\nn::Int: The number of samples.\nnfeatures::Int: The number of features.\nweighted::Bool: Whether the dataset is non-uniformly weighted.\nweights::Union{AbstractVector{T},Nothing}: If the dataset is weighted,   these specify the per-sample weight (with shape (n,)).\nextra::NamedTuple: Extra information to pass to a custom evaluation   function. Since this is an arbitrary named tuple, you could pass   any sort of dataset you wish to here.\navg_y: The average value of y (weighted, if weights are passed).\nuse_baseline: Whether to use a baseline loss. This will be set to false   if the baseline loss is calculated to be Inf.\nbaseline_loss: The loss of a constant function which predicts the average   value of y. This is loss-dependent and should be updated with   update_baseline_loss!.\nvariable_names::Array{String,1}: The names of the features,   with shape (nfeatures,).\ndisplay_variable_names::Array{String,1}: A version of variable_names   but for printing to the terminal (e.g., with unicode versions).\ny_variable_name::String: The name of the output variable.\nX_units: Unit information of X. When used, this is a vector   of DynamicQuantities.Quantity{<:Any,<:Dimensions} with shape (nfeatures,).\ny_units: Unit information of y. When used, this is a single   DynamicQuantities.Quantity{<:Any,<:Dimensions}.\nX_sym_units: Unit information of X. When used, this is a vector   of DynamicQuantities.Quantity{<:Any,<:SymbolicDimensions} with shape (nfeatures,).\ny_sym_units: Unit information of y. When used, this is a single   DynamicQuantities.Quantity{<:Any,<:SymbolicDimensions}.\n\n\n\n\n\n","category":"type"},{"location":"types/#SymbolicRegression.CoreModule.DatasetModule.Dataset-Union{Tuple{AbstractMatrix{T}}, Tuple{T}, Tuple{AbstractMatrix{T}, Union{Nothing, AbstractVector{T}}}} where T<:Number","page":"Types","title":"SymbolicRegression.CoreModule.DatasetModule.Dataset","text":"Dataset(X::AbstractMatrix{T},\n        y::Union{AbstractVector{T},Nothing}=nothing,\n        loss_type::Type=Nothing;\n        weights::Union{AbstractVector{T}, Nothing}=nothing,\n        variable_names::Union{Array{String, 1}, Nothing}=nothing,\n        y_variable_name::Union{String,Nothing}=nothing,\n        extra::NamedTuple=NamedTuple(),\n        X_units::Union{AbstractVector, Nothing}=nothing,\n        y_units=nothing,\n) where {T<:DATA_TYPE}\n\nConstruct a dataset to pass between internal functions.\n\n\n\n\n\n","category":"method"},{"location":"types/#SymbolicRegression.LossFunctionsModule.update_baseline_loss!","page":"Types","title":"SymbolicRegression.LossFunctionsModule.update_baseline_loss!","text":"update_baseline_loss!(dataset::Dataset{T,L}, options::Options) where {T<:DATA_TYPE,L<:LOSS_TYPE}\n\nUpdate the baseline loss of the dataset using the loss function specified in options.\n\n\n\n\n\n","category":"function"}]
}
